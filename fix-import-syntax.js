const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤ —ñ–º–ø–æ—Ä—Ç–∞—Ö React
 * –í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–¥–≤—ñ–π–Ω—ñ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ —Ç–∞ —ñ–Ω—à—ñ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
 */

const targetFiles = [
  './components/Contact.tsx',
  './components/ContactForm.tsx',
  './components/ExportOpportunitiesMap.tsx',
  './components/Team.tsx',
];

function fixImportSyntax(content) {
  let fixed = content;

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ –≤ —ñ–º–ø–æ—Ä—Ç–∞—Ö React
  // –í—ñ–¥: import React, { ChangeEvent }, { useCallback, useEffect } from 'react';
  // –î–æ: import React, { ChangeEvent, useCallback, useEffect } from 'react';
  fixed = fixed.replace(
    /import\s+React,\s*\{([^}]+)\},\s*\{([^}]+)\}\s+from\s+['"]react['"]/g,
    (match, group1, group2) => {
      const combined = `${group1.trim()}, ${group2.trim()}`;
      return `import React, { ${combined} } from 'react'`;
    }
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ç—Ä—ñ–π–Ω—ñ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏
  fixed = fixed.replace(
    /import\s+React,\s*\{([^}]+)\},\s*\{([^}]+)\},\s*\{([^}]+)\}\s+from\s+['"]react['"]/g,
    (match, group1, group2, group3) => {
      const combined = `${group1.trim()}, ${group2.trim()}, ${group3.trim()}`;
      return `import React, { ${combined} } from 'react'`;
    }
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ —ñ–º–ø–æ—Ä—Ç–∞—Ö
  fixed = fixed.replace(
    /import\s+React,\s*\{([^}]+)\}\s+from\s+['"]react['"]/g,
    (match, imports) => {
      const importList = imports.split(',').map(imp => imp.trim());
      const uniqueImports = [...new Set(importList)].filter(imp => imp.length > 0);
      return `import React, { ${uniqueImports.join(', ')} } from 'react'`;
    }
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
  fixed = fixed.replace(
    /import\s+React,\s*\{\s*\}\s+from\s+['"]react['"]/g,
    "import React from 'react'"
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–π–≤—ñ –∫–æ–º–∏
  fixed = fixed.replace(
    /import\s+React,\s*\{([^}]+)\}\s+from\s+['"]react['"]/g,
    (match, imports) => {
      const cleanImports = imports.replace(/,\s*,/g, ',').replace(/^,\s*|\s*,$/g, '');
      return `import React, { ${cleanImports} } from 'react'`;
    }
  );

  return fixed;
}

function fixTypeErrors(content) {
  let fixed = content;

  // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ return statements
  fixed = fixed.replace(
    /(function\s+\w+\([^)]*\)\s*:\s*JSX\.Element\s*\{[^}]*)(\})/g,
    (match, funcBody, closingBrace) => {
      if (!funcBody.includes('return')) {
        return funcBody + '\n  return null;\n' + closingBrace;
      }
      return match;
    }
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ arrow functions –±–µ–∑ return
  fixed = fixed.replace(
    /(const\s+\w+\s*=\s*\([^)]*\)\s*:\s*JSX\.Element\s*=>\s*\{[^}]*)(\})/g,
    (match, funcBody, closingBrace) => {
      if (!funcBody.includes('return')) {
        return funcBody + '\n  return null;\n' + closingBrace;
      }
      return match;
    }
  );

  return fixed;
}

function processFile(filePath) {
  try {
    console.log(`–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: ${filePath}`);

    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`);
      return false;
    }

    const content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    let fixedContent = fixImportSyntax(content);
    fixedContent = fixTypeErrors(fixedContent);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∏ –∑–º—ñ–Ω–∏
    if (fixedContent !== originalContent) {
      fs.writeFileSync(filePath, fixedContent, 'utf8');
      console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∑–º—ñ–Ω: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

function main() {
  console.log('üîß –ü–æ—á–∞—Ç–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤...');

  let processedFiles = 0;
  let fixedFiles = 0;

  for (const filePath of targetFiles) {
    processedFiles++;
    if (processFile(filePath)) {
      fixedFiles++;
    }
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
  console.log(`–û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${processedFiles}`);
  console.log(`–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${fixedFiles}`);

  if (fixedFiles > 0) {
    console.log('\n‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run type-check');
    console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó');
  } else {
    console.log('\n‚ÑπÔ∏è  –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  fixImportSyntax,
  fixTypeErrors,
  processFile,
};
