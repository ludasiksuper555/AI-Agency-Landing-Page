const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
const { main: validateEnv } = require('./health-checks/validate-env');
const { main: checkServices } = require('./health-checks/check-services');
const { main: projectBackup } = require('./backup/project-backup');
const { main: gitStatusCheck } = require('./git/git-status-check');

class Stage0Preparation {
  constructor() {
    this.results = [];
    this.startTime = Date.now();
    this.errors = [];
    this.warnings = [];
  }

  async runStep(stepName, stepFunction, required = true) {
    console.log(`\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${stepName}`);
    console.log('-'.repeat(60));

    const start = Date.now();

    try {
      const result = await stepFunction();
      const duration = Date.now() - start;

      const stepResult = {
        step: stepName,
        success: true,
        duration,
        result,
        timestamp: new Date().toISOString(),
      };

      this.results.push(stepResult);
      console.log(`‚úÖ ${stepName} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (${duration}ms)`);

      return stepResult;
    } catch (error) {
      const duration = Date.now() - start;

      const stepResult = {
        step: stepName,
        success: false,
        duration,
        error: error.message,
        timestamp: new Date().toISOString(),
      };

      this.results.push(stepResult);

      if (required) {
        console.error(`‚ùå ${stepName} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
        this.errors.push(`${stepName}: ${error.message}`);
      } else {
        console.warn(`‚ö†Ô∏è  ${stepName} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: ${error.message}`);
        this.warnings.push(`${stepName}: ${error.message}`);
      }

      return stepResult;
    }
  }

  async validateEnvironment() {
    return await validateEnv();
  }

  async checkServiceHealth() {
    return await checkServices();
  }

  async createProjectBackup() {
    return await projectBackup();
  }

  async checkGitStatus() {
    return await gitStatusCheck();
  }

  async checkDependencies() {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞...');

    const packageJsonPath = 'package.json';

    if (!fs.existsSync(packageJsonPath)) {
      throw new Error('package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ lock —Ñ–∞–π–ª–∞
    const lockFiles = ['package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'];
    const existingLockFile = lockFiles.find(file => fs.existsSync(file));

    if (!existingLockFile) {
      console.warn('   ‚ö†Ô∏è  Lock —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.warnings.push('Lock —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω lock —Ñ–∞–π–ª: ${existingLockFile}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
    if (!fs.existsSync('node_modules')) {
      console.warn('   ‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      this.warnings.push('node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è node_modules –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const criticalDeps = ['react', 'next'];
    const missingDeps = criticalDeps.filter(
      dep => !packageJson.dependencies?.[dep] && !packageJson.devDependencies?.[dep]
    );

    if (missingDeps.length > 0) {
      console.warn(`   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`);
      this.warnings.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`);
    }

    return {
      packageJson: packageJson.name || 'unknown',
      version: packageJson.version || 'unknown',
      lockFile: existingLockFile,
      nodeModulesExists: fs.existsSync('node_modules'),
      dependenciesCount: Object.keys(packageJson.dependencies || {}).length,
      devDependenciesCount: Object.keys(packageJson.devDependencies || {}).length,
      missingCriticalDeps: missingDeps,
    };
  }

  async checkSystemRequirements() {
    console.log('üíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...');

    const requirements = {
      node: null,
      npm: null,
      git: null,
      diskSpace: null,
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
      const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
      requirements.node = nodeVersion;
      console.log(`   ‚úÖ Node.js: ${nodeVersion}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Node.js
      const majorVersion = parseInt(nodeVersion.replace('v', '').split('.')[0]);
      if (majorVersion < 16) {
        this.warnings.push(
          `Node.js –≤–µ—Ä—Å–∏—è ${nodeVersion} –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= 16)`
        );
      }
    } catch (error) {
      console.error('   ‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.errors.push('Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
      const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
      requirements.npm = npmVersion;
      console.log(`   ‚úÖ npm: ${npmVersion}`);
    } catch (error) {
      console.error('   ‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.errors.push('npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
      const gitVersion = execSync('git --version', { encoding: 'utf8' }).trim();
      requirements.git = gitVersion;
      console.log(`   ‚úÖ ${gitVersion}`);
    } catch (error) {
      console.error('   ‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.errors.push('Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ (Windows)
      const diskInfo = execSync('dir /-c', { encoding: 'utf8' });
      const freeSpaceMatch = diskInfo.match(/([0-9,]+)\s+bytes free/);
      if (freeSpaceMatch) {
        const freeBytes = parseInt(freeSpaceMatch[1].replace(/,/g, ''));
        const freeGB = (freeBytes / (1024 * 1024 * 1024)).toFixed(2);
        requirements.diskSpace = `${freeGB} GB`;
        console.log(`   ‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${freeGB} GB`);

        if (freeBytes < 1024 * 1024 * 1024) {
          // –ú–µ–Ω—å—à–µ 1 GB
          this.warnings.push(`–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${freeGB} GB`);
        }
      }
    } catch (error) {
      console.warn('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ');
    }

    return requirements;
  }

  async generatePreparationReport() {
    const totalTime = Date.now() - this.startTime;
    const successful = this.results.filter(r => r.success).length;
    const failed = this.results.filter(r => !r.success).length;

    const report = {
      timestamp: new Date().toISOString(),
      stage: 'Stage 0 - Preparation',
      duration: totalTime,
      summary: {
        total: this.results.length,
        successful,
        failed,
        errors: this.errors.length,
        warnings: this.warnings.length,
        status:
          this.errors.length === 0
            ? this.warnings.length === 0
              ? 'ready'
              : 'ready_with_warnings'
            : 'not_ready',
      },
      results: this.results,
      errors: this.errors,
      warnings: this.warnings,
      recommendations: this.generateRecommendations(),
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const reportPath = path.join(reportsDir, `stage0-preparation-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    console.log('\nüìä –û—Ç—á–µ—Ç Stage 0 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:');
    console.log('='.repeat(60));
    console.log(`–°—Ç–∞—Ç—É—Å: ${report.summary.status.toUpperCase()}`);
    console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    console.log(`–í—Å–µ–≥–æ —à–∞–≥–æ–≤: ${report.summary.total}`);
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
    console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}`);
    console.log(`–û—à–∏–±–æ–∫: ${report.summary.errors}`);
    console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.summary.warnings}`);
    console.log('='.repeat(60));

    this.results.forEach(result => {
      const icon = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.step} (${result.duration}ms)`);
    });

    if (this.errors.length > 0) {
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:');
      this.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.warnings.forEach((warning, index) => {
        console.log(`   ${index + 1}. ${warning}`);
      });
    }

    if (report.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      report.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
    }

    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    return report;
  }

  generateRecommendations() {
    const recommendations = [];

    if (this.errors.length > 0) {
      recommendations.push('–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º');
    }

    if (this.warnings.some(w => w.includes('node_modules'))) {
      recommendations.push('–í—ã–ø–æ–ª–Ω–∏—Ç–µ npm install –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }

    if (this.warnings.some(w => w.includes('Lock —Ñ–∞–π–ª'))) {
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ lock —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    }

    if (this.warnings.some(w => w.includes('Git'))) {
      recommendations.push('–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º');
    }

    if (this.warnings.some(w => w.includes('—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞'))) {
      recommendations.push('–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
    }

    if (this.warnings.some(w => w.includes('Node.js –≤–µ—Ä—Å–∏—è'))) {
      recommendations.push('–û–±–Ω–æ–≤–∏—Ç–µ Node.js –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
    }

    return recommendations;
  }

  async runFullPreparation() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Stage 0 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    console.log('='.repeat(60));
    console.log('–≠—Ç–æ—Ç —ç—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∏—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    await this.runStep('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', () => this.checkSystemRequirements(), true);
    await this.runStep('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π', () => this.checkDependencies(), true);
    await this.runStep('–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', () => this.validateEnvironment(), true);
    await this.runStep('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git', () => this.checkGitStatus(), false);
    await this.runStep('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', () => this.checkServiceHealth(), false);
    await this.runStep('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', () => this.createProjectBackup(), false);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const report = await this.generatePreparationReport();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (report.summary.status === 'ready') {
      console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
      console.log('–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ Stage 1');
    } else if (report.summary.status === 'ready_with_warnings') {
      console.log('\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');
      process.exit(1);
    }

    return report;
  }
}

async function main() {
  const preparation = new Stage0Preparation();

  try {
    await preparation.runFullPreparation();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Stage 0:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { Stage0Preparation, main };
