const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class GitStatusChecker {
  constructor() {
    this.results = [];
    this.warnings = [];
    this.errors = [];
  }

  checkGitRepository() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      execSync('git rev-parse --git-dir', { stdio: 'pipe' });
      console.log('   ‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
      return true;
    } catch (error) {
      console.error('   ‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
      this.errors.push('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
      return false;
    }
  }

  getCurrentBranch() {
    console.log('üåø –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏...');

    try {
      const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();

      if (!branch) {
        console.warn('   ‚ö†Ô∏è  –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ detached HEAD');
        this.warnings.push('–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ detached HEAD');

        const commit = execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim();
        return { branch: null, commit: commit.substring(0, 8), detached: true };
      }

      console.log(`   ‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${branch}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–æ–π
      const mainBranches = ['main', 'master', 'develop'];
      if (!mainBranches.includes(branch)) {
        console.warn(`   ‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ–º –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ (${branch})`);
        this.warnings.push(`–†–∞–±–æ—Ç–∞–µ–º –≤ –≤–µ—Ç–∫–µ ${branch}, –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π`);
      }

      return { branch, detached: false };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–∫–∏: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–∫–∏: ${error.message}`);
      return null;
    }
  }

  checkWorkingDirectory() {
    console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');

    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' });

      if (!status.trim()) {
        console.log('   ‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è');
        return { clean: true, files: [] };
      }

      const files = status
        .split('\n')
        .filter(line => line.trim())
        .map(line => {
          const statusCode = line.substring(0, 2);
          const fileName = line.substring(3);

          let statusText = 'unknown';
          if (statusCode.includes('M')) statusText = 'modified';
          else if (statusCode.includes('A')) statusText = 'added';
          else if (statusCode.includes('D')) statusText = 'deleted';
          else if (statusCode.includes('R')) statusText = 'renamed';
          else if (statusCode.includes('C')) statusText = 'copied';
          else if (statusCode.includes('U')) statusText = 'unmerged';
          else if (statusCode.includes('?')) statusText = 'untracked';

          return { file: fileName, status: statusText, code: statusCode };
        });

      console.log(`   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è (${files.length} —Ñ–∞–π–ª–æ–≤):`);
      files.forEach(file => {
        console.log(`      ${file.status}: ${file.file}`);
      });

      this.warnings.push(`–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç ${files.length} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);

      return { clean: false, files };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      return null;
    }
  }

  checkStagingArea() {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...');

    try {
      const staged = execSync('git diff --cached --name-only', { encoding: 'utf8' });

      if (!staged.trim()) {
        console.log('   ‚úÖ –û–±–ª–∞—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—É—Å—Ç–∞');
        return { hasStaged: false, files: [] };
      }

      const stagedFiles = staged.split('\n').filter(line => line.trim());

      console.log(`   üìù –§–∞–π–ª—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (${stagedFiles.length}):`);
      stagedFiles.forEach(file => {
        console.log(`      ${file}`);
      });

      return { hasStaged: true, files: stagedFiles };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ${error.message}`);
      return null;
    }
  }

  checkRemoteStatus() {
    console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ remote
      const remotes = execSync('git remote -v', { encoding: 'utf8' });

      if (!remotes.trim()) {
        console.warn('   ‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        this.warnings.push('–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return { hasRemote: false };
      }

      console.log('   üîó –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:');
      remotes
        .split('\n')
        .filter(line => line.trim())
        .forEach(line => {
          console.log(`      ${line}`);
        });

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ origin
        const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();

        if (branch) {
          try {
            const ahead = execSync(`git rev-list --count origin/${branch}..HEAD`, {
              encoding: 'utf8',
            }).trim();
            const behind = execSync(`git rev-list --count HEAD..origin/${branch}`, {
              encoding: 'utf8',
            }).trim();

            const aheadCount = parseInt(ahead) || 0;
            const behindCount = parseInt(behind) || 0;

            if (aheadCount === 0 && behindCount === 0) {
              console.log('   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º');
            } else {
              if (aheadCount > 0) {
                console.warn(`   ‚ö†Ô∏è  –í–ø–µ—Ä–µ–¥–∏ –Ω–∞ ${aheadCount} –∫–æ–º–º–∏—Ç–æ–≤`);
                this.warnings.push(`–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥–∏ –Ω–∞ ${aheadCount} –∫–æ–º–º–∏—Ç–æ–≤`);
              }
              if (behindCount > 0) {
                console.warn(`   ‚ö†Ô∏è  –û—Ç—Å—Ç–∞–µ—Ç –Ω–∞ ${behindCount} –∫–æ–º–º–∏—Ç–æ–≤`);
                this.warnings.push(`–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ ${behindCount} –∫–æ–º–º–∏—Ç–æ–≤`);
              }
            }

            return {
              hasRemote: true,
              ahead: aheadCount,
              behind: behindCount,
              synced: aheadCount === 0 && behindCount === 0,
            };
          } catch (error) {
            console.warn('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ç–∫–æ–π');
            this.warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ç–∫–æ–π');
            return { hasRemote: true, trackingError: true };
          }
        }
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error.message}`);
        this.warnings.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error.message}`);
      }

      return { hasRemote: true };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error.message}`);
      return null;
    }
  }

  checkLastCommit() {
    console.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞...');

    try {
      const lastCommit = execSync('git log -1 --format="%H|%an|%ae|%ad|%s"', {
        encoding: 'utf8',
      }).trim();
      const [hash, author, email, date, message] = lastCommit.split('|');

      console.log(`   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:`);
      console.log(`      Hash: ${hash.substring(0, 8)}`);
      console.log(`      –ê–≤—Ç–æ—Ä: ${author} <${email}>`);
      console.log(`      –î–∞—Ç–∞: ${date}`);
      console.log(`      –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
      const commitDate = new Date(date);
      const now = new Date();
      const daysSinceCommit = Math.floor((now - commitDate) / (1000 * 60 * 60 * 24));

      if (daysSinceCommit > 7) {
        console.warn(`   ‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –±—ã–ª ${daysSinceCommit} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
        this.warnings.push(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –±—ã–ª ${daysSinceCommit} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
      }

      return {
        hash: hash.substring(0, 8),
        fullHash: hash,
        author,
        email,
        date,
        message,
        daysSince: daysSinceCommit,
      };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ: ${error.message}`);
      return null;
    }
  }

  checkGitIgnore() {
    console.log('üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...');

    const gitignorePath = '.gitignore';

    if (!fs.existsSync(gitignorePath)) {
      console.warn('   ‚ö†Ô∏è  –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.warnings.push('–§–∞–π–ª .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return { exists: false };
    }

    try {
      const content = fs.readFileSync(gitignorePath, 'utf8');
      const lines = content.split('\n').filter(line => line.trim() && !line.startsWith('#'));

      console.log(`   ‚úÖ .gitignore –Ω–∞–π–¥–µ–Ω (${lines.length} –ø—Ä–∞–≤–∏–ª)`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
      const importantRules = ['node_modules', '.env', '.env.local', 'dist', 'build', '.next'];

      const missingRules = importantRules.filter(rule => !lines.some(line => line.includes(rule)));

      if (missingRules.length > 0) {
        console.warn(`   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: ${missingRules.join(', ')}`);
        this.warnings.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ .gitignore: ${missingRules.join(', ')}`);
      }

      return {
        exists: true,
        rulesCount: lines.length,
        missingRules,
      };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .gitignore: ${error.message}`);
      this.errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .gitignore: ${error.message}`);
      return null;
    }
  }

  generateReport() {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        errors: this.errors.length,
        warnings: this.warnings.length,
        status:
          this.errors.length === 0 ? (this.warnings.length === 0 ? 'clean' : 'warnings') : 'errors',
      },
      errors: this.errors,
      warnings: this.warnings,
      results: this.results,
    };

    console.log('\nüìä –û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ Git:');
    console.log('='.repeat(50));
    console.log(`–°—Ç–∞—Ç—É—Å: ${report.summary.status.toUpperCase()}`);
    console.log(`–û—à–∏–±–æ–∫: ${report.summary.errors}`);
    console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.summary.warnings}`);
    console.log('='.repeat(50));

    if (this.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      this.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.warnings.forEach((warning, index) => {
        console.log(`   ${index + 1}. ${warning}`);
      });
    }

    if (this.errors.length === 0 && this.warnings.length === 0) {
      console.log('\nüéâ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
    }

    return report;
  }

  async runFullCheck() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Git —Å—Ç–∞—Ç—É—Å–∞...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if (!this.checkGitRepository()) {
      return this.generateReport();
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const checks = [
      () => this.getCurrentBranch(),
      () => this.checkWorkingDirectory(),
      () => this.checkStagingArea(),
      () => this.checkRemoteStatus(),
      () => this.checkLastCommit(),
      () => this.checkGitIgnore(),
    ];

    for (const check of checks) {
      try {
        const result = check();
        if (result) {
          this.results.push(result);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
        this.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
      }
    }

    return this.generateReport();
  }
}

async function main() {
  const checker = new GitStatusChecker();

  try {
    const report = await checker.runFullCheck();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const reportPath = path.join(reportsDir, `git-status-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (report.summary.errors > 0) {
      process.exit(1);
    } else if (report.summary.warnings > 0) {
      process.exit(2);
    }

    return report;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { GitStatusChecker, main };
