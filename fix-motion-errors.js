const fs = require('fs');
const path = require('path');

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Motion.div className –ø–æ–º–∏–ª–æ–∫
 * –í–∏–ø—Ä–∞–≤–ª—è—î –Ω–∞–π–∫—Ä–∏—Ç–∏—á–Ω—ñ—à—ñ TypeScript –ø–æ–º–∏–ª–∫–∏ –∑ Framer Motion
 */

const componentsDir = './components';

// –§–∞–π–ª–∏ –∑ Motion.div –ø–æ–º–∏–ª–∫–∞–º–∏
const targetFiles = [
  'Contact.tsx',
  'ContactForm.tsx',
  'FAQ.tsx',
  'Features.tsx',
  'Footer.tsx',
  'Hero.tsx',
  'Services.tsx',
  'ExportOpportunitiesMap.tsx',
  'MeatPriceMonitor.tsx',
  'Pricing.tsx',
  'Team.tsx',
];

/**
 * –í–∏–ø—Ä–∞–≤–ª—è—î Motion.div className –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
 * –ü–µ—Ä–µ–º—ñ—â—É—î className –ø—ñ—Å–ª—è motion props
 */
function fixMotionClassNameIssues(content) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è motion.div –∑ className –ø–µ—Ä–µ–¥ motion props
  const motionDivPattern = /<motion\.div([^>]*?)className=["']([^"']*)["']([^>]*?)>/g;

  return content.replace(motionDivPattern, (match, beforeClassName, className, afterClassName) => {
    // –í–∏–¥–∞–ª—è—î–º–æ className –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
    const cleanedBefore = beforeClassName.replace(/\s*className=["'][^"']*["']\s*/, ' ');
    const cleanedAfter = afterClassName.replace(/\s*className=["'][^"']*["']\s*/, ' ');

    // –î–æ–¥–∞—î–º–æ className –≤ –∫—ñ–Ω—Ü—ñ
    return `<motion.div${cleanedBefore}${cleanedAfter} className="${className}">`;
  });
}

/**
 * –í–∏–ø—Ä–∞–≤–ª—è—î motion.form onSubmit –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
 */
function fixMotionFormIssues(content) {
  const motionFormPattern = /<motion\.form([^>]*?)onSubmit=\{([^}]+)\}([^>]*?)>/g;

  return content.replace(
    motionFormPattern,
    (match, beforeOnSubmit, onSubmitValue, afterOnSubmit) => {
      // –í–∏–¥–∞–ª—è—î–º–æ onSubmit –∑ motion.form
      const cleanedBefore = beforeOnSubmit.replace(/\s*onSubmit=\{[^}]+\}\s*/, ' ');
      const cleanedAfter = afterOnSubmit.replace(/\s*onSubmit=\{[^}]+\}\s*/, ' ');

      // –û–±–≥–æ—Ä—Ç–∞—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω—É form –∑ onSubmit
      return `<form onSubmit={${onSubmitValue}}><motion.div${cleanedBefore}${cleanedAfter}>`;
    }
  );
}

/**
 * –í–∏–ø—Ä–∞–≤–ª—è—î motion.button className –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
 */
function fixMotionButtonIssues(content) {
  const motionButtonPattern = /<motion\.button([^>]*?)className=["']([^"']*)["']([^>]*?)>/g;

  return content.replace(
    motionButtonPattern,
    (match, beforeClassName, className, afterClassName) => {
      const cleanedBefore = beforeClassName.replace(/\s*className=["'][^"']*["']\s*/, ' ');
      const cleanedAfter = afterClassName.replace(/\s*className=["'][^"']*["']\s*/, ' ');

      return `<motion.button${cleanedBefore}${cleanedAfter} className="${className}">`;
    }
  );
}

/**
 * –î–æ–¥–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ return statements
 */
function fixMissingReturnStatements(content) {
  // –®—É–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ return –≤ –∫—ñ–Ω—Ü—ñ
  const functionPattern =
    /(function\s+\w+\([^)]*\)\s*\{[^}]*if\s*\([^)]+\)\s*\{[^}]*return[^}]*\}[^}]*)(\})/g;

  return content.replace(functionPattern, (match, functionBody, closingBrace) => {
    if (!functionBody.includes('return null') && !functionBody.includes('return undefined')) {
      return functionBody + '\n  return null;' + closingBrace;
    }
    return match;
  });
}

/**
 * –í–∏–¥–∞–ª—è—î –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
 */
function removeUnusedImports(content) {
  const lines = content.split('\n');
  const usedImports = new Set();

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–¥—ñ
  const codeContent = lines.slice(10).join('\n'); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—É
  return lines
    .map(line => {
      if (line.includes('import') && line.includes('from')) {
        // –í–∏—Ç—è–≥—É—î–º–æ —ñ–º–µ–Ω–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤
        const importMatch = line.match(/import\s*\{([^}]+)\}/);
        if (importMatch) {
          const imports = importMatch[1].split(',').map(imp => imp.trim());
          const usedInCode = imports.filter(imp => {
            const regex = new RegExp(`\\b${imp}\\b`, 'g');
            return regex.test(codeContent);
          });

          if (usedInCode.length === 0) {
            return `// ${line} // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ: –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è`;
          } else if (usedInCode.length < imports.length) {
            const fromMatch = line.match(/from\s+["']([^"']+)["']/);
            const fromPart = fromMatch ? fromMatch[0] : '';
            return `import { ${usedInCode.join(', ')} } ${fromPart};`;
          }
        }
      }
      return line;
    })
    .join('\n');
}

/**
 * –í–∏–ø—Ä–∞–≤–ª—è—î —Ç–∏–ø–∏ –¥–ª—è event handlers
 */
function fixEventHandlerTypes(content) {
  // –í–∏–ø—Ä–∞–≤–ª—è—î (e) => –Ω–∞ (e: FormEvent<HTMLFormElement>) =>
  content = content.replace(
    /(const\s+\w*[Ss]ubmit\w*\s*=\s*)\(e\)\s*=>/g,
    '$1(e: FormEvent<HTMLFormElement>) =>'
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î (e) => –Ω–∞ (e: ChangeEvent<HTMLInputElement>) =>
  content = content.replace(
    /(const\s+\w*[Cc]hange\w*\s*=\s*)\(e\)\s*=>/g,
    '$1(e: ChangeEvent<HTMLInputElement>) =>'
  );

  // –í–∏–ø—Ä–∞–≤–ª—è—î (e) => –Ω–∞ (e: MouseEvent<HTMLButtonElement>) =>
  content = content.replace(
    /(const\s+\w*[Cc]lick\w*\s*=\s*)\(e\)\s*=>/g,
    '$1(e: MouseEvent<HTMLButtonElement>) =>'
  );

  return content;
}

/**
 * –î–æ–¥–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è —Ç–∏–ø—ñ–≤
 */
function addMissingTypeImports(content) {
  const needsFormEvent = content.includes('FormEvent');
  const needsChangeEvent = content.includes('ChangeEvent');
  const needsMouseEvent = content.includes('MouseEvent');

  if (needsFormEvent || needsChangeEvent || needsMouseEvent) {
    const reactImportLine = content.match(/import React[^;]*;/);
    if (reactImportLine) {
      const newImports = [];
      if (needsFormEvent) newImports.push('FormEvent');
      if (needsChangeEvent) newImports.push('ChangeEvent');
      if (needsMouseEvent) newImports.push('MouseEvent');

      const newImportLine = reactImportLine[0].replace(
        /import React/,
        `import React, { ${newImports.join(', ')} }`
      );

      content = content.replace(reactImportLine[0], newImportLine);
    }
  }

  return content;
}

/**
 * –û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω —Ñ–∞–π–ª
 */
function processFile(filePath) {
  try {
    console.log(`–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: ${filePath}`);

    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    content = fixMotionClassNameIssues(content);
    content = fixMotionFormIssues(content);
    content = fixMotionButtonIssues(content);
    content = fixMissingReturnStatements(content);
    content = removeUnusedImports(content);
    content = fixEventHandlerTypes(content);
    content = addMissingTypeImports(content);

    // –ó–∞–ø–∏—Å—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∑–º—ñ–Ω–∏
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ${filePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∑–º—ñ–Ω: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 */
function main() {
  console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Motion.div –ø–æ–º–∏–ª–æ–∫...');

  let processedCount = 0;
  let fixedCount = 0;

  targetFiles.forEach(fileName => {
    const filePath = path.join(componentsDir, fileName);

    if (fs.existsSync(filePath)) {
      processedCount++;
      if (processFile(filePath)) {
        fixedCount++;
      }
    } else {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`);
    }
  });

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:');
  console.log(`–û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${processedCount}`);
  console.log(`–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${fixedCount}`);
  console.log('\n‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run type-check');
  console.log('2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤—Ä—É—á–Ω—É');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  fixMotionClassNameIssues,
  fixMotionFormIssues,
  fixMotionButtonIssues,
  fixMissingReturnStatements,
  removeUnusedImports,
  fixEventHandlerTypes,
  addMissingTypeImports,
  processFile,
};
