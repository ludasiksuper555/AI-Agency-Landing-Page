const requiredEnvVars = [
  'DATABASE_URL',
  'REDIS_URL',
  'JWT_SECRET',
  'API_BASE_URL',
  'SENTRY_DSN',
  'NEXTAUTH_SECRET',
  'NEXTAUTH_URL',
  'CLERK_SECRET_KEY',
  'CLERK_PUBLISHABLE_KEY',
];

const optionalEnvVars = ['GOOGLE_ANALYTICS_ID', 'VERCEL_URL', 'NODE_ENV', 'PORT'];

function validateEnvironmentVariables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

  const missingRequired = requiredEnvVars.filter(varName => !process.env[varName]);
  const missingOptional = optionalEnvVars.filter(varName => !process.env[varName]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (missingRequired.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missingRequired.forEach(varName => {
      console.error(`   - ${varName}`);
    });
    console.error('\nüí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    process.exit(1);
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (missingOptional.length > 0) {
    console.warn('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    missingOptional.forEach(varName => {
      console.warn(`   - ${varName}`);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
  const urlVars = ['DATABASE_URL', 'REDIS_URL', 'API_BASE_URL', 'NEXTAUTH_URL'];
  const invalidUrls = [];

  urlVars.forEach(varName => {
    const value = process.env[varName];
    if (value && !isValidUrl(value)) {
      invalidUrls.push(varName);
    }
  });

  if (invalidUrls.length > 0) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL:');
    invalidUrls.forEach(varName => {
      console.error(`   - ${varName}: ${process.env[varName]}`);
    });
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–µ–∫—Ä–µ—Ç–æ–≤
  const secretVars = ['JWT_SECRET', 'NEXTAUTH_SECRET'];
  const weakSecrets = [];

  secretVars.forEach(varName => {
    const value = process.env[varName];
    if (value && value.length < 32) {
      weakSecrets.push(varName);
    }
  });

  if (weakSecrets.length > 0) {
    console.warn('‚ö†Ô∏è  –°–ª–∞–±—ã–µ —Å–µ–∫—Ä–µ—Ç—ã (–º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤):');
    weakSecrets.forEach(varName => {
      console.warn(`   - ${varName}`);
    });
  }

  console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  console.log(
    `üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${requiredEnvVars.length} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö, ${optionalEnvVars.length} –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö`
  );

  return {
    required: requiredEnvVars.length,
    optional: optionalEnvVars.length - missingOptional.length,
    missing: missingRequired.length + missingOptional.length,
    valid: true,
  };
}

function isValidUrl(string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

if (require.main === module) {
  try {
    validateEnvironmentVariables();
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

module.exports = { validateEnvironmentVariables };
