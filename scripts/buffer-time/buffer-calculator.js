const fs = require('fs');
const path = require('path');

class BufferTimeCalculator {
  constructor() {
    this.bufferRules = {
      // –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      complexity: {
        low: 1.2, // +20%
        medium: 1.5, // +50%
        high: 2.0, // +100%
        critical: 2.5, // +150%
      },

      // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Ç–∏–ø—É —Ä–∏—Å–∫–∞
      risk: {
        low: 1.1, // +10%
        medium: 1.3, // +30%
        high: 1.6, // +60%
        critical: 2.0, // +100%
      },

      // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
      taskType: {
        setup: 1.3, // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        development: 1.4, // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        testing: 1.6, // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        debugging: 2.0, // –û—Ç–ª–∞–¥–∫–∞
        integration: 1.8, // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        deployment: 1.5, // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        documentation: 1.2, // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
      },

      // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∫–æ–º–∞–Ω–¥—ã
      experience: {
        expert: 0.9, // -10%
        senior: 1.0, // –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        middle: 1.2, // +20%
        junior: 1.5, // +50%
      },
    };

    this.maxBufferMultiplier = 3.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    this.minBufferMultiplier = 1.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
  }

  calculateBuffer(task) {
    const {
      estimatedTime,
      complexity = 'medium',
      risk = 'medium',
      taskType = 'development',
      experience = 'senior',
      dependencies = [],
      isBlocking = false,
      hasExternalDeps = false,
    } = task;

    if (!estimatedTime || estimatedTime <= 0) {
      throw new Error('–í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }

    // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    let multiplier = 1.0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    multiplier *= this.bufferRules.complexity[complexity] || 1.5;
    multiplier *= this.bufferRules.risk[risk] || 1.3;
    multiplier *= this.bufferRules.taskType[taskType] || 1.4;
    multiplier *= this.bufferRules.experience[experience] || 1.0;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if (dependencies.length > 0) {
      multiplier *= 1 + dependencies.length * 0.1; // +10% –∑–∞ –∫–∞–∂–¥—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    }

    if (isBlocking) {
      multiplier *= 1.3; // +30% –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á
    }

    if (hasExternalDeps) {
      multiplier *= 1.4; // +40% –¥–ª—è –∑–∞–¥–∞—á —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    multiplier = Math.min(multiplier, this.maxBufferMultiplier);
    multiplier = Math.max(multiplier, this.minBufferMultiplier);

    const bufferTime = estimatedTime * (multiplier - 1);
    const totalTime = estimatedTime + bufferTime;

    return {
      originalEstimate: estimatedTime,
      bufferTime: Math.round(bufferTime),
      totalTime: Math.round(totalTime),
      multiplier: Math.round(multiplier * 100) / 100,
      factors: {
        complexity: this.bufferRules.complexity[complexity],
        risk: this.bufferRules.risk[risk],
        taskType: this.bufferRules.taskType[taskType],
        experience: this.bufferRules.experience[experience],
        dependencies: dependencies.length,
        isBlocking,
        hasExternalDeps,
      },
    };
  }

  calculateProjectBuffer(tasks) {
    console.log('üìä –†–∞—Å—á–µ—Ç –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞...');

    if (!Array.isArray(tasks) || tasks.length === 0) {
      throw new Error('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
    }

    const results = tasks.map((task, index) => {
      try {
        const result = this.calculateBuffer(task);
        console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞ ${index + 1}: ${task.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(
          `      –û—Ü–µ–Ω–∫–∞: ${result.originalEstimate}—á ‚Üí –ò—Ç–æ–≥–æ: ${result.totalTime}—á (–±—É—Ñ–µ—Ä: ${result.bufferTime}—á)`
        );

        return {
          ...task,
          ...result,
          index: index + 1,
        };
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${index + 1}: ${error.message}`);
        return {
          ...task,
          index: index + 1,
          error: error.message,
        };
      }
    });

    const validResults = results.filter(r => !r.error);
    const totalOriginal = validResults.reduce((sum, r) => sum + r.originalEstimate, 0);
    const totalWithBuffer = validResults.reduce((sum, r) => sum + r.totalTime, 0);
    const totalBuffer = totalWithBuffer - totalOriginal;

    const summary = {
      totalTasks: tasks.length,
      validTasks: validResults.length,
      errorTasks: results.length - validResults.length,
      totalOriginalTime: totalOriginal,
      totalBufferTime: totalBuffer,
      totalTimeWithBuffer: totalWithBuffer,
      averageMultiplier:
        validResults.length > 0
          ? Math.round(
              (validResults.reduce((sum, r) => sum + r.multiplier, 0) / validResults.length) * 100
            ) / 100
          : 0,
      bufferPercentage: totalOriginal > 0 ? Math.round((totalBuffer / totalOriginal) * 100) : 0,
    };

    console.log('\nüìà –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${summary.totalTasks}`);
    console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á: ${summary.validTasks}`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: ${summary.totalOriginalTime}—á`);
    console.log(`   –ë—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${summary.totalBufferTime}—á`);
    console.log(`   –ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è: ${summary.totalTimeWithBuffer}—á`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${summary.averageMultiplier}`);
    console.log(`   –ë—É—Ñ–µ—Ä: ${summary.bufferPercentage}%`);

    return {
      tasks: results,
      summary,
      timestamp: new Date().toISOString(),
    };
  }

  generateRecommendations(projectResult) {
    const { summary, tasks } = projectResult;
    const recommendations = [];

    // –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
    if (summary.bufferPercentage > 80) {
      recommendations.push({
        type: 'warning',
        message: `–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±—É—Ñ–µ—Ä (${summary.bufferPercentage}%). –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ü–µ–Ω–∫–∏ —Å–ª–∏—à–∫–æ–º –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã.`,
        action: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏ –∑–∞–¥–∞—á',
      });
    } else if (summary.bufferPercentage < 20) {
      recommendations.push({
        type: 'warning',
        message: `–ù–∏–∑–∫–∏–π –±—É—Ñ–µ—Ä (${summary.bufferPercentage}%). –ü—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –Ω–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Å—Ä–æ–∫–∏.`,
        action: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á–∏',
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –±—É—Ñ–µ—Ä–æ–º
    const highBufferTasks = tasks.filter(t => !t.error && t.multiplier > 2.0);
    if (highBufferTasks.length > 0) {
      recommendations.push({
        type: 'info',
        message: `${highBufferTasks.length} –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –±—É—Ñ–µ—Ä–æ–º (>2x).`,
        action: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –∑–∞–¥–∞—á–∏',
        tasks: highBufferTasks.map(t => t.name || `–ó–∞–¥–∞—á–∞ ${t.index}`),
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á
    const blockingTasks = tasks.filter(t => !t.error && t.isBlocking);
    if (blockingTasks.length > 0) {
      recommendations.push({
        type: 'critical',
        message: `${blockingTasks.length} –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.`,
        action: '–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
        tasks: blockingTasks.map(t => t.name || `–ó–∞–¥–∞—á–∞ ${t.index}`),
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    const externalDepTasks = tasks.filter(t => !t.error && t.hasExternalDeps);
    if (externalDepTasks.length > 0) {
      recommendations.push({
        type: 'warning',
        message: `${externalDepTasks.length} –∑–∞–¥–∞—á –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.`,
        action: '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω B –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á',
        tasks: externalDepTasks.map(t => t.name || `–ó–∞–¥–∞—á–∞ ${t.index}`),
      });
    }

    return recommendations;
  }

  saveReport(projectResult, outputPath = null) {
    const recommendations = this.generateRecommendations(projectResult);

    const report = {
      ...projectResult,
      recommendations,
      metadata: {
        generatedAt: new Date().toISOString(),
        bufferRules: this.bufferRules,
        version: '1.0.0',
      },
    };

    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const fileName = outputPath || `buffer-time-analysis-${Date.now()}.json`;
    const filePath = path.join(reportsDir, fileName);

    fs.writeFileSync(filePath, JSON.stringify(report, null, 2));

    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

    return { report, filePath };
  }

  loadTasksFromFile(filePath) {
    console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);

    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(content);

      if (Array.isArray(data)) {
        return data;
      } else if (data.tasks && Array.isArray(data.tasks)) {
        return data.tasks;
      } else {
        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º tasks');
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  generateSampleTasks() {
    return [
      {
        name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
        estimatedTime: 4,
        complexity: 'low',
        risk: 'low',
        taskType: 'setup',
        experience: 'senior',
      },
      {
        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API',
        estimatedTime: 16,
        complexity: 'high',
        risk: 'medium',
        taskType: 'development',
        experience: 'middle',
        dependencies: ['database', 'auth'],
      },
      {
        name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º',
        estimatedTime: 8,
        complexity: 'medium',
        risk: 'high',
        taskType: 'integration',
        experience: 'senior',
        hasExternalDeps: true,
      },
      {
        name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        estimatedTime: 12,
        complexity: 'medium',
        risk: 'medium',
        taskType: 'testing',
        experience: 'middle',
        dependencies: ['api', 'frontend'],
      },
      {
        name: '–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ',
        estimatedTime: 6,
        complexity: 'medium',
        risk: 'high',
        taskType: 'deployment',
        experience: 'senior',
        isBlocking: true,
      },
    ];
  }
}

async function main() {
  const calculator = new BufferTimeCalculator();

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    let tasks;

    if (args.length > 0 && args[0] !== '--sample') {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
      tasks = calculator.loadTasksFromFile(args[0]);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --sample –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)\n'
      );
      tasks = calculator.generateSampleTasks();
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
    const result = calculator.calculateProjectBuffer(tasks);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const { report, filePath } = calculator.saveReport(result);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      report.recommendations.forEach((rec, index) => {
        const icon = rec.type === 'critical' ? 'üî¥' : rec.type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        console.log(`   ${icon} ${rec.message}`);
        console.log(`      –î–µ–π—Å—Ç–≤–∏–µ: ${rec.action}`);
        if (rec.tasks) {
          console.log(`      –ó–∞–¥–∞—á–∏: ${rec.tasks.join(', ')}`);
        }
      });
    }

    console.log('\nüéâ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    return result;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { BufferTimeCalculator, main };
