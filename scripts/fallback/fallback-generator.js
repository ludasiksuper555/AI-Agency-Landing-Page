const fs = require('fs');
const path = require('path');

class FallbackPlansGenerator {
  constructor() {
    this.planTypes = {
      optimal: {
        name: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω',
        description: '–õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é',
        riskTolerance: 'low',
        timeBuffer: 1.1,
      },
      alternative: {
        name: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω',
        description: '–ö–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é',
        riskTolerance: 'medium',
        timeBuffer: 1.3,
      },
      minimal: {
        name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω',
        description: '–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∏—á–∏',
        riskTolerance: 'high',
        timeBuffer: 1.5,
      },
      emergency: {
        name: '–ê–≤–∞—Ä–∏–π–Ω—ã–π –ø–ª–∞–Ω',
        description: '–ú–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞, —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
        riskTolerance: 'critical',
        timeBuffer: 2.0,
      },
    };

    this.riskFactors = {
      technical: {
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏',
        factors: [
          '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
          '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
          '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
          '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
          '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å',
        ],
      },
      resource: {
        name: '–†–µ—Å—É—Ä—Å–Ω—ã–µ —Ä–∏—Å–∫–∏',
        factors: [
          '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏',
          '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã',
          '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã',
          '–ë—é–¥–∂–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
          '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        ],
      },
      external: {
        name: '–í–Ω–µ—à–Ω–∏–µ —Ä–∏—Å–∫–∏',
        factors: [
          '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
          '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API',
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏',
          '–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
          '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
        ],
      },
      business: {
        name: '–ë–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏',
        factors: [
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤',
          '–ü–æ—Ç–µ—Ä—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω',
          '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
          '–†—ã–Ω–æ—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        ],
      },
    };

    this.escalationLevels = [
      {
        level: 1,
        name: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        description: '–†–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–º–∞–Ω–¥—ã',
        timeLimit: '2 —á–∞—Å–∞',
        authority: 'team-lead',
      },
      {
        level: 2,
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        description: '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è',
        timeLimit: '4 —á–∞—Å–∞',
        authority: 'tech-lead',
      },
      {
        level: 3,
        name: '–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        description: '–†–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞',
        timeLimit: '8 —á–∞—Å–æ–≤',
        authority: 'project-manager',
      },
      {
        level: 4,
        name: '–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞',
        timeLimit: '24 —á–∞—Å–∞',
        authority: 'executive',
      },
    ];
  }

  generateFallbackPlans(project) {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –æ—Ç–∫–∞—Ç–∞...');

    const { name, stages = [], constraints = {}, priorities = [], risks = [] } = project;

    if (!name || stages.length === 0) {
      throw new Error('–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —ç—Ç–∞–ø—ã');
    }

    const plans = {};

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞
    Object.keys(this.planTypes).forEach(planType => {
      console.log(`   üìã –°–æ–∑–¥–∞–Ω–∏–µ ${this.planTypes[planType].name.toLowerCase()}...`);
      plans[planType] = this.createPlan(project, planType);
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    const decisionMatrix = this.createDecisionMatrix(project, plans);

    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    const escalationPaths = this.createEscalationPaths(project, risks);

    const result = {
      project: {
        name,
        originalStages: stages.length,
        constraints,
        priorities,
        risks,
      },
      plans,
      decisionMatrix,
      escalationPaths,
      metadata: {
        generatedAt: new Date().toISOString(),
        version: '1.0.0',
      },
    };

    console.log('   ‚úÖ –ü–ª–∞–Ω—ã –æ—Ç–∫–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    return result;
  }

  createPlan(project, planType) {
    const planConfig = this.planTypes[planType];
    const { stages, constraints = {}, priorities = [] } = project;

    // –§–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞
    const filteredStages = this.filterStagesByPlan(stages, planType, priorities);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    const adjustedStages = this.adjustStageTimings(filteredStages, planConfig.timeBuffer);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã
    const tradeoffs = this.identifyTradeoffs(stages, filteredStages, planType);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
    const successCriteria = this.defineSuccessCriteria(planType, filteredStages);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const activationConditions = this.defineActivationConditions(planType, project.risks || []);

    return {
      type: planType,
      name: planConfig.name,
      description: planConfig.description,
      stages: adjustedStages,
      tradeoffs,
      successCriteria,
      activationConditions,
      estimatedTime: adjustedStages.reduce((sum, stage) => sum + (stage.estimatedTime || 0), 0),
      riskLevel: planConfig.riskTolerance,
      confidence: this.calculateConfidence(planType, filteredStages),
    };
  }

  filterStagesByPlan(stages, planType, priorities) {
    const priorityMap = {
      optimal: ['critical', 'high', 'medium', 'low'],
      alternative: ['critical', 'high', 'medium'],
      minimal: ['critical', 'high'],
      emergency: ['critical'],
    };

    const allowedPriorities = priorityMap[planType] || ['critical'];

    return stages
      .filter(stage => {
        const stagePriority = stage.priority || 'medium';
        return allowedPriorities.includes(stagePriority);
      })
      .map(stage => ({
        ...stage,
        planType,
        included: true,
        reason: `–í–∫–ª—é—á–µ–Ω –≤ ${this.planTypes[planType].name.toLowerCase()}`,
      }));
  }

  adjustStageTimings(stages, timeBuffer) {
    return stages.map(stage => {
      const originalTime = stage.estimatedTime || 0;
      const adjustedTime = Math.round(originalTime * timeBuffer);

      return {
        ...stage,
        originalEstimatedTime: originalTime,
        estimatedTime: adjustedTime,
        timeBuffer: adjustedTime - originalTime,
        bufferPercentage:
          originalTime > 0 ? Math.round(((adjustedTime - originalTime) / originalTime) * 100) : 0,
      };
    });
  }

  identifyTradeoffs(originalStages, filteredStages, planType) {
    const removedStages = originalStages.filter(
      original =>
        !filteredStages.find(
          filtered => filtered.id === original.id || filtered.name === original.name
        )
    );

    const tradeoffs = {
      removedFeatures: removedStages.map(stage => ({
        name: stage.name,
        impact: stage.businessValue || 'medium',
        reason: `–ò—Å–∫–ª—é—á–µ–Ω –∏–∑ ${this.planTypes[planType].name.toLowerCase()}`,
      })),
      reducedQuality: [],
      increasedRisk: [],
      resourceSavings: {
        time: removedStages.reduce((sum, stage) => sum + (stage.estimatedTime || 0), 0),
        effort: removedStages.length,
      },
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
    if (planType === 'minimal' || planType === 'emergency') {
      tradeoffs.reducedQuality.push({
        area: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        impact: '–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        mitigation: '–§–æ–∫—É—Å –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç—è—Ö',
      });
    }

    if (planType === 'emergency') {
      tradeoffs.reducedQuality.push({
        area: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        impact: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        mitigation: '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞',
      });

      tradeoffs.increasedRisk.push({
        type: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥',
        probability: 'high',
        impact: 'medium',
        mitigation: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
      });
    }

    return tradeoffs;
  }

  defineSuccessCriteria(planType, stages) {
    const baseCriteria = {
      optimal: [
        '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
        '–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏',
        '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      ],
      alternative: [
        '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç',
        '–ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã',
        '–ë–∞–∑–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞',
      ],
      minimal: ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç', '–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞', '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã'],
      emergency: ['–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã', '–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫'],
    };

    const stageCriteria = stages.map(stage => ({
      stage: stage.name,
      criteria: stage.successCriteria || [`${stage.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`],
    }));

    return {
      general: baseCriteria[planType] || baseCriteria.emergency,
      stages: stageCriteria,
      metrics: this.defineMetrics(planType),
    };
  }

  defineMetrics(planType) {
    const metricsMap = {
      optimal: {
        performance: { target: '< 2s', critical: '< 5s' },
        availability: { target: '99.9%', critical: '99%' },
        errorRate: { target: '< 0.1%', critical: '< 1%' },
      },
      alternative: {
        performance: { target: '< 3s', critical: '< 7s' },
        availability: { target: '99%', critical: '95%' },
        errorRate: { target: '< 0.5%', critical: '< 2%' },
      },
      minimal: {
        performance: { target: '< 5s', critical: '< 10s' },
        availability: { target: '95%', critical: '90%' },
        errorRate: { target: '< 1%', critical: '< 5%' },
      },
      emergency: {
        performance: { target: '< 10s', critical: '< 30s' },
        availability: { target: '90%', critical: '80%' },
        errorRate: { target: '< 5%', critical: '< 10%' },
      },
    };

    return metricsMap[planType] || metricsMap.emergency;
  }

  defineActivationConditions(planType, risks) {
    const timeBasedConditions = {
      optimal: [],
      alternative: ['–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 20%', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ 1-2 –¥–Ω—è'],
      minimal: [
        '–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 40%',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ 3+ –¥–Ω—è',
      ],
      emergency: [
        '–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 60%+',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–±–æ–∏',
        '–ü–æ—Ç–µ—Ä—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
      ],
    };

    const riskBasedConditions = risks.map(risk => ({
      risk: risk.name || risk.type,
      condition: `–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–∞: ${risk.name || risk.type}`,
      probability: risk.probability || 'medium',
      impact: risk.impact || 'medium',
    }));

    return {
      timeBased: timeBasedConditions[planType] || [],
      riskBased: riskBasedConditions,
      manual: ['–†–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', '–†–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏–π'],
    };
  }

  calculateConfidence(planType, stages) {
    const baseConfidence = {
      optimal: 0.7,
      alternative: 0.8,
      minimal: 0.9,
      emergency: 0.95,
    };

    const stageComplexity = stages.reduce((sum, stage) => {
      const complexity = stage.complexity || 'medium';
      const complexityScore = { low: 1, medium: 2, high: 3, critical: 4 };
      return sum + (complexityScore[complexity] || 2);
    }, 0);

    const avgComplexity = stages.length > 0 ? stageComplexity / stages.length : 2;
    const complexityAdjustment = (4 - avgComplexity) * 0.05; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

    const confidence = Math.min(
      0.99,
      Math.max(0.5, baseConfidence[planType] + complexityAdjustment)
    );
    return Math.round(confidence * 100) / 100;
  }

  createDecisionMatrix(project, plans) {
    console.log('   üéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π...');

    const criteria = [
      { name: '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', weight: 0.3, type: 'time' },
      { name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', weight: 0.25, type: 'features' },
      { name: '–†–∏—Å–∫', weight: 0.2, type: 'risk' },
      { name: '–†–µ—Å—É—Ä—Å—ã', weight: 0.15, type: 'resources' },
      { name: '–ö–∞—á–µ—Å—Ç–≤–æ', weight: 0.1, type: 'quality' },
    ];

    const matrix = Object.keys(plans).map(planType => {
      const plan = plans[planType];
      const scores = {};

      // –û—Ü–µ–Ω–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
      scores.time = Math.max(0, 10 - plan.estimatedTime / 10);

      // –û—Ü–µ–Ω–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ —ç—Ç–∞–ø–æ–≤ = –ª—É—á—à–µ)
      scores.features = (plan.stages.length / project.originalStages) * 10;

      // –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∏—Å–∫—É (–≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = –ª—É—á—à–µ)
      scores.risk = plan.confidence * 10;

      // –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º (–º–µ–Ω—å—à–µ —ç—Ç–∞–ø–æ–≤ = –º–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤ = –ª—É—á—à–µ)
      scores.resources = Math.max(0, 10 - plan.stages.length);

      // –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞)
      const qualityMap = { optimal: 10, alternative: 7, minimal: 5, emergency: 3 };
      scores.quality = qualityMap[planType] || 5;

      // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      const weightedScore = criteria.reduce((sum, criterion) => {
        return sum + scores[criterion.type] * criterion.weight;
      }, 0);

      return {
        plan: planType,
        name: plan.name,
        scores,
        weightedScore: Math.round(weightedScore * 100) / 100,
        recommendation: this.getRecommendation(planType, weightedScore),
      };
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
    matrix.sort((a, b) => b.weightedScore - a.weightedScore);

    return {
      criteria,
      evaluations: matrix,
      recommended: matrix[0],
      timestamp: new Date().toISOString(),
    };
  }

  getRecommendation(planType, score) {
    if (score >= 8) return '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä';
    if (score >= 6) return '–•–æ—Ä–æ—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç';
    if (score >= 4) return '–ü—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç';
    return '–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä';
  }

  createEscalationPaths(project, risks) {
    console.log('   üö® –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏...');

    const paths = risks.map(risk => {
      const riskLevel = this.assessRiskLevel(risk);
      const escalationLevel = this.determineEscalationLevel(riskLevel);

      return {
        risk: risk.name || risk.type,
        description: risk.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        probability: risk.probability || 'medium',
        impact: risk.impact || 'medium',
        riskLevel,
        escalationLevel,
        escalationPath: this.escalationLevels.slice(0, escalationLevel),
        actions: this.defineEscalationActions(risk, escalationLevel),
        timeline: this.createEscalationTimeline(escalationLevel),
      };
    });

    return {
      paths,
      generalEscalation: this.escalationLevels,
      emergencyContacts: this.defineEmergencyContacts(),
      communicationProtocol: this.defineCommunicationProtocol(),
    };
  }

  assessRiskLevel(risk) {
    const probabilityScore = { low: 1, medium: 2, high: 3, critical: 4 };
    const impactScore = { low: 1, medium: 2, high: 3, critical: 4 };

    const probScore = probabilityScore[risk.probability] || 2;
    const impScore = impactScore[risk.impact] || 2;

    const totalScore = probScore * impScore;

    if (totalScore >= 12) return 'critical';
    if (totalScore >= 8) return 'high';
    if (totalScore >= 4) return 'medium';
    return 'low';
  }

  determineEscalationLevel(riskLevel) {
    const levelMap = {
      low: 1,
      medium: 2,
      high: 3,
      critical: 4,
    };

    return levelMap[riskLevel] || 2;
  }

  defineEscalationActions(risk, escalationLevel) {
    const actions = [];

    // –£—Ä–æ–≤–µ–Ω—å 1: –ö–æ–º–∞–Ω–¥–∞
    actions.push({
      level: 1,
      action: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–º–∞–Ω–¥–æ–π',
      responsible: 'team-lead',
      timeframe: '2 —á–∞—Å–∞',
    });

    if (escalationLevel >= 2) {
      actions.push({
        level: 2,
        action: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        responsible: 'tech-lead',
        timeframe: '4 —á–∞—Å–∞',
      });
    }

    if (escalationLevel >= 3) {
      actions.push({
        level: 3,
        action: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤',
        responsible: 'project-manager',
        timeframe: '8 —á–∞—Å–æ–≤',
      });
    }

    if (escalationLevel >= 4) {
      actions.push({
        level: 4,
        action: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞',
        responsible: 'executive',
        timeframe: '24 —á–∞—Å–∞',
      });
    }

    return actions;
  }

  createEscalationTimeline(escalationLevel) {
    const timeline = [];
    let cumulativeTime = 0;

    for (let i = 1; i <= escalationLevel; i++) {
      const level = this.escalationLevels[i - 1];
      const timeInHours = parseInt(level.timeLimit);

      timeline.push({
        level: i,
        startTime: cumulativeTime,
        endTime: cumulativeTime + timeInHours,
        duration: timeInHours,
        description: level.description,
      });

      cumulativeTime += timeInHours;
    }

    return timeline;
  }

  defineEmergencyContacts() {
    return [
      {
        role: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä',
        availability: '24/7',
        contact: 'tech-lead@company.com',
        phone: '+7-XXX-XXX-XXXX',
      },
      {
        role: '–ü—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
        availability: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã + —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏',
        contact: 'pm@company.com',
        phone: '+7-XXX-XXX-XXXX',
      },
      {
        role: 'DevOps –∏–Ω–∂–µ–Ω–µ—Ä',
        availability: '24/7 (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)',
        contact: 'devops@company.com',
        phone: '+7-XXX-XXX-XXXX',
      },
    ];
  }

  defineCommunicationProtocol() {
    return {
      channels: {
        normal: 'Slack #project-channel',
        urgent: 'Slack #incidents + Email',
        critical: 'Phone + Slack #critical + Email',
      },
      updateFrequency: {
        normal: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
        urgent: '–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞',
        critical: '–ö–∞–∂–¥—ã–π —á–∞—Å',
      },
      stakeholders: [
        '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        '–ü—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        '–ë–∏–∑–Ω–µ—Å-–∑–∞–∫–∞–∑—á–∏–∫',
      ],
    };
  }

  saveReport(fallbackResult, outputPath = null) {
    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const fileName = outputPath || `fallback-plans-${Date.now()}.json`;
    const filePath = path.join(reportsDir, fileName);

    fs.writeFileSync(filePath, JSON.stringify(fallbackResult, null, 2));

    console.log(`\nüìÑ –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞–Ω–∞–º –æ—Ç–∫–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

    return { report: fallbackResult, filePath };
  }

  generateSampleProject() {
    return {
      name: '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
      constraints: {
        deadline: '2024-02-01',
        budget: 100000,
        teamSize: 5,
      },
      priorities: ['critical', 'high', 'medium', 'low'],
      risks: [
        {
          name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API',
          type: 'technical',
          probability: 'medium',
          impact: 'high',
          description: '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–Ω–µ—à–Ω–µ–≥–æ API',
        },
        {
          name: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
          type: 'resource',
          probability: 'low',
          impact: 'high',
          description: '–ë–æ–ª–µ–∑–Ω—å –∏–ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
        },
        {
          name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
          type: 'business',
          probability: 'high',
          impact: 'medium',
          description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        },
      ],
      stages: [
        {
          id: 1,
          name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
          estimatedTime: 8,
          priority: 'critical',
          complexity: 'low',
          businessValue: 'high',
        },
        {
          id: 2,
          name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API',
          estimatedTime: 40,
          priority: 'critical',
          complexity: 'high',
          businessValue: 'critical',
        },
        {
          id: 3,
          name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞',
          estimatedTime: 32,
          priority: 'high',
          complexity: 'medium',
          businessValue: 'high',
        },
        {
          id: 4,
          name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
          estimatedTime: 16,
          priority: 'medium',
          complexity: 'high',
          businessValue: 'medium',
        },
        {
          id: 5,
          name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          estimatedTime: 24,
          priority: 'high',
          complexity: 'medium',
          businessValue: 'high',
        },
        {
          id: 6,
          name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
          estimatedTime: 16,
          priority: 'medium',
          complexity: 'low',
          businessValue: 'low',
        },
        {
          id: 7,
          name: '–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ',
          estimatedTime: 8,
          priority: 'critical',
          complexity: 'medium',
          businessValue: 'critical',
        },
        {
          id: 8,
          name: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
          estimatedTime: 12,
          priority: 'low',
          complexity: 'medium',
          businessValue: 'low',
        },
      ],
    };
  }
}

async function main() {
  const generator = new FallbackPlansGenerator();

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –æ—Ç–∫–∞—Ç–∞...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    let project;

    if (args.length > 0 && args[0] !== '--sample') {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ñ–∞–π–ª–∞
      console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${args[0]}`);

      if (!fs.existsSync(args[0])) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${args[0]}`);
      }

      const content = fs.readFileSync(args[0], 'utf8');
      project = JSON.parse(content);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
      console.log(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --sample –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)\n'
      );
      project = generator.generateSampleProject();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –æ—Ç–∫–∞—Ç–∞
    const result = generator.generateFallbackPlans(project);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const { report, filePath } = generator.saveReport(result);

    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    console.log('\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –æ—Ç–∫–∞—Ç–∞:');
    Object.keys(result.plans).forEach(planType => {
      const plan = result.plans[planType];
      console.log(`   ${plan.name}:`);
      console.log(`      –≠—Ç–∞–ø–æ–≤: ${plan.stages.length}`);
      console.log(`      –í—Ä–µ–º—è: ${plan.estimatedTime}—á`);
      console.log(`      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${plan.confidence * 100}%`);
    });

    console.log(`\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞–Ω: ${result.decisionMatrix.recommended.name}`);
    console.log(`   –û—Ü–µ–Ω–∫–∞: ${result.decisionMatrix.recommended.weightedScore}/10`);
    console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${result.decisionMatrix.recommended.recommendation}`);

    console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –æ—Ç–∫–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    return result;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –æ—Ç–∫–∞—Ç–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { FallbackPlansGenerator, main };
