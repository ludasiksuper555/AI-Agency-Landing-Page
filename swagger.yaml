openapi: 3.0.3
info:
  title: Project Management API
  description: |
    Comprehensive API for project management system with error handling and user management.

    ## Features
    - JWT Authentication
    - User Management
    - Content Management
    - Error Logging
    - File Upload
    - Rate Limiting

    ## Error Handling
    The API includes comprehensive error handling with:
    - Client-side error logging via `/api/errors`
    - React ErrorBoundary integration
    - Structured error responses
    - Error categorization and monitoring

    ## Authentication
    All protected endpoints require a valid JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com
    url: https://example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: User management
  - name: content
    description: Content management
  - name: errors
    description: Error logging and handling
  - name: files
    description: File upload and management

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate user and return JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
                  expiresIn:
                    type: integer
                    example: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      description: Register a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - confirmPassword
              properties:
                email:
                  type: string
                  format: email
                  example: newuser@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
                name:
                  type: string
                  minLength: 2
                  example: Jane Doe
                confirmPassword:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh JWT token
      description: Get a new JWT token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: refresh_token_here
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: new_jwt_token_here
                  expiresIn:
                    type: integer
                    example: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/profile:
    get:
      tags:
        - users
      summary: Get user profile
      description: Retrieve the current user's profile information
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - users
      summary: Update user profile
      description: Update the current user's profile information
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Smith
                avatar:
                  type: string
                  format: uri
                  example: https://example.com/avatars/new_avatar.jpg
                preferences:
                  $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile updated successfully
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags:
        - users
      summary: Get users list
      description: Retrieve a paginated list of users (admin only)
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search by name or email
          schema:
            type: string
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [user, admin, moderator]
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, email, createdAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /content/posts:
    get:
      tags:
        - content
      summary: Get posts
      description: Retrieve a list of posts with filtering options
      operationId: getPosts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
        - name: authorId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - content
      summary: Create post
      description: Create a new post
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Post created successfully
                  data:
                    $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/errors:
    post:
      tags:
        - errors
      summary: Log client-side error
      description: |
        Log errors from client-side applications for monitoring and debugging.
        This endpoint is used by ErrorBoundary components and error handlers
        to collect application errors.
      operationId: logError
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - timestamp
                - userAgent
                - url
              properties:
                message:
                  type: string
                  description: Error message
                  example: "Cannot read property 'map' of undefined"
                stack:
                  type: string
                  description: Error stack trace
                  example: "TypeError: Cannot read property 'map' of undefined\n    at Component.render"
                componentStack:
                  type: string
                  description: React component stack trace
                  example: "    in Component (at App.js:10)\n    in App (at index.js:5)"
                timestamp:
                  type: string
                  format: date-time
                  description: When the error occurred
                  example: '2024-01-20T10:30:00Z'
                userAgent:
                  type: string
                  description: Browser user agent
                  example: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                url:
                  type: string
                  format: uri
                  description: URL where error occurred
                  example: 'https://example.com/dashboard'
                userId:
                  type: string
                  description: ID of the user (if authenticated)
                  example: 'user_123'
                sessionId:
                  type: string
                  description: Session identifier
                  example: 'session_456'
      responses:
        '200':
          description: Error logged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Error logged successfully
                  errorId:
                    type: string
                    example: error_1642248600000_abc123
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Missing required fields: message, timestamp, userAgent, url'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Method not allowed. Only POST requests are accepted.'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/upload:
    post:
      tags:
        - files
      summary: Upload file
      description: Upload a file to the server
      operationId: uploadFile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                category:
                  type: string
                  enum: [avatar, document, image]
                  description: File category
                description:
                  type: string
                  description: File description
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: File uploaded successfully
                  data:
                    $ref: '#/components/schemas/File'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: user_123
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin, moderator]
          example: user
        createdAt:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        lastLoginAt:
          type: string
          format: date-time
          example: '2024-01-20T14:22:00Z'

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            avatar:
              type: string
              format: uri
              example: https://example.com/avatars/user_123.jpg
            preferences:
              $ref: '#/components/schemas/UserPreferences'

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark]
          example: dark
        language:
          type: string
          example: ru
        notifications:
          type: boolean
          example: true

    Post:
      type: object
      properties:
        id:
          type: string
          example: post_123
        title:
          type: string
          example: Заголовок поста
        content:
          type: string
          example: Содержимое поста...
        excerpt:
          type: string
          example: Краткое описание...
        status:
          type: string
          enum: [draft, published, archived]
          example: published
        category:
          type: string
          example: technology
        tags:
          type: array
          items:
            type: string
          example: ['javascript', 'react', 'api']
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-16T12:45:00Z'
        publishedAt:
          type: string
          format: date-time
          example: '2024-01-15T14:00:00Z'
        viewsCount:
          type: integer
          example: 1250
        likesCount:
          type: integer
          example: 45
        commentsCount:
          type: integer
          example: 12

    CreatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: Новый пост
        content:
          type: string
          example: Содержимое нового поста...
        excerpt:
          type: string
          example: Краткое описание нового поста
        category:
          type: string
          example: technology
        tags:
          type: array
          items:
            type: string
          example: ['javascript', 'tutorial']
        status:
          type: string
          enum: [draft, published]
          default: draft
          example: draft
        featuredImage:
          type: string
          format: uri
          example: https://example.com/images/post_image.jpg
        publishAt:
          type: string
          format: date-time
          example: '2024-01-20T10:00:00Z'

    File:
      type: object
      properties:
        id:
          type: string
          example: file_123
        filename:
          type: string
          example: document.pdf
        originalName:
          type: string
          example: my-document.pdf
        mimeType:
          type: string
          example: application/pdf
        size:
          type: integer
          example: 1024000
        url:
          type: string
          format: uri
          example: https://cdn.example.com/files/file_123.pdf
        category:
          type: string
          enum: [avatar, document, image]
          example: document
        uploadedAt:
          type: string
          format: date-time
          example: '2024-01-20T10:30:00Z'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 500
        totalPages:
          type: integer
          example: 25
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Validation failed
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: Email is required

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - invalid or missing token
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: UNAUTHORIZED
              message:
                type: string
                example: Invalid or expired token

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: FORBIDDEN
              message:
                type: string
                example: Insufficient permissions

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: NOT_FOUND
              message:
                type: string
                example: Resource not found

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: RATE_LIMIT_EXCEEDED
              message:
                type: string
                example: Too many requests. Please try again later.
              retryAfter:
                type: integer
                example: 60

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: INTERNAL_SERVER_ERROR
              message:
                type: string
                example: An unexpected error occurred
              requestId:
                type: string
                example: req_123456789
