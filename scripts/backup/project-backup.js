const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const archiver = require('archiver');

class ProjectBackup {
  constructor() {
    this.backupDir = path.join(process.cwd(), 'backups');
    this.timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    this.backupName = `project-backup-${this.timestamp}`;
    this.results = [];
  }

  async createBackupDirectory() {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...');

    try {
      if (!fs.existsSync(this.backupDir)) {
        fs.mkdirSync(this.backupDir, { recursive: true });
      }

      const backupPath = path.join(this.backupDir, this.backupName);
      fs.mkdirSync(backupPath, { recursive: true });

      console.log(`   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
      return { success: true, path: backupPath };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async backupGitRepository() {
    console.log('üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
      const status = execSync('git status --porcelain', { encoding: 'utf8' });
      const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
      const lastCommit = execSync('git log -1 --format="%H %s"', { encoding: 'utf8' }).trim();

      const gitInfo = {
        branch,
        lastCommit,
        hasUncommittedChanges: status.length > 0,
        uncommittedFiles: status.split('\n').filter(line => line.trim()).length,
      };

      // –°–æ–∑–¥–∞–µ–º bundle
      const bundlePath = path.join(this.backupDir, this.backupName, 'git-repository.bundle');
      execSync(`git bundle create "${bundlePath}" --all`, { stdio: 'inherit' });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git
      const gitInfoPath = path.join(this.backupDir, this.backupName, 'git-info.json');
      fs.writeFileSync(gitInfoPath, JSON.stringify(gitInfo, null, 2));

      if (gitInfo.hasUncommittedChanges) {
        console.log(
          `   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (${gitInfo.uncommittedFiles} —Ñ–∞–π–ª–æ–≤)`
        );

        // –°–æ–∑–¥–∞–µ–º diff –¥–ª—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const diffPath = path.join(this.backupDir, this.backupName, 'uncommitted-changes.diff');
        const diff = execSync('git diff HEAD', { encoding: 'utf8' });
        fs.writeFileSync(diffPath, diff);

        console.log(`   üìÑ Diff —Å–æ—Ö—Ä–∞–Ω–µ–Ω: uncommitted-changes.diff`);
      }

      console.log(`   ‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–≤–µ—Ç–∫–∞: ${branch})`);
      return { success: true, gitInfo, bundlePath };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Git: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async backupDatabase() {
    console.log('üóÑÔ∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    if (!process.env.DATABASE_URL) {
      console.log('   ‚ö†Ô∏è  DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return { success: false, reason: 'DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }

    try {
      const dumpPath = path.join(this.backupDir, this.backupName, 'database-dump.sql');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
      const command = `pg_dump "${process.env.DATABASE_URL}" > "${dumpPath}"`;
      execSync(command, { stdio: 'inherit' });

      const stats = fs.statSync(dumpPath);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

      console.log(`   ‚úÖ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω (${sizeInMB} MB)`);
      return { success: true, dumpPath, size: sizeInMB };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –ë–î: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async backupEnvironmentFiles() {
    console.log('üîê –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

    const envFiles = ['.env', '.env.local', '.env.development', '.env.production', '.env.example'];

    const backedUpFiles = [];
    const envBackupDir = path.join(this.backupDir, this.backupName, 'environment');

    try {
      fs.mkdirSync(envBackupDir, { recursive: true });

      for (const envFile of envFiles) {
        if (fs.existsSync(envFile)) {
          const content = fs.readFileSync(envFile, 'utf8');

          // –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          const maskedContent = content.replace(
            /(PASSWORD|SECRET|KEY|TOKEN)=.*/gi,
            '$1=***MASKED***'
          );

          const backupPath = path.join(envBackupDir, envFile);
          fs.writeFileSync(backupPath, maskedContent);

          backedUpFiles.push(envFile);
          console.log(`   üìÑ ${envFile} —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Å–µ–∫—Ä–µ—Ç—ã –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã)`);
        }
      }

      if (backedUpFiles.length === 0) {
        console.log('   ‚ö†Ô∏è  –§–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return { success: false, reason: '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }

      console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${backedUpFiles.length} —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
      return { success: true, files: backedUpFiles };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async backupPackageFiles() {
    console.log('üì¶ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...');

    const packageFiles = ['package.json', 'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml'];

    const backedUpFiles = [];
    const packageBackupDir = path.join(this.backupDir, this.backupName, 'packages');

    try {
      fs.mkdirSync(packageBackupDir, { recursive: true });

      for (const packageFile of packageFiles) {
        if (fs.existsSync(packageFile)) {
          const sourcePath = packageFile;
          const backupPath = path.join(packageBackupDir, packageFile);

          fs.copyFileSync(sourcePath, backupPath);
          backedUpFiles.push(packageFile);

          console.log(`   üìÑ ${packageFile} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
        }
      }

      if (backedUpFiles.length === 0) {
        console.log('   ‚ö†Ô∏è  –§–∞–π–ª—ã –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return { success: false, reason: '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }

      console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${backedUpFiles.length} —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–æ–≤`);
      return { success: true, files: backedUpFiles };
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–æ–≤: ${error.message}`);
      return { success: false, error: error.message };
    }
  }

  async createArchive() {
    console.log('üóúÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');

    const archivePath = path.join(this.backupDir, `${this.backupName}.zip`);
    const sourcePath = path.join(this.backupDir, this.backupName);

    return new Promise((resolve, reject) => {
      const output = fs.createWriteStream(archivePath);
      const archive = archiver('zip', {
        zlib: { level: 9 }, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
      });

      output.on('close', () => {
        const sizeInMB = (archive.pointer() / (1024 * 1024)).toFixed(2);
        console.log(`   ‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${archivePath} (${sizeInMB} MB)`);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        fs.rmSync(sourcePath, { recursive: true, force: true });

        resolve({ success: true, archivePath, size: sizeInMB });
      });

      archive.on('error', error => {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ${error.message}`);
        reject({ success: false, error: error.message });
      });

      archive.pipe(output);
      archive.directory(sourcePath, false);
      archive.finalize();
    });
  }

  async generateReport() {
    const report = {
      timestamp: new Date().toISOString(),
      backupName: this.backupName,
      results: this.results,
      summary: {
        total: this.results.length,
        successful: this.results.filter(r => r.success).length,
        failed: this.results.filter(r => !r.success).length,
      },
    };

    const reportPath = path.join(this.backupDir, `${this.backupName}-report.json`);
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    console.log('\nüìä –û—Ç—á–µ—Ç –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:');
    console.log('='.repeat(50));
    console.log(`–ò–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${this.backupName}`);
    console.log(`–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${report.summary.total}`);
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${report.summary.successful}`);
    console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${report.summary.failed}`);
    console.log('='.repeat(50));

    this.results.forEach(result => {
      const icon = result.success ? '‚úÖ' : '‚ùå';
      console.log(
        `${icon} ${result.operation}: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : result.error || result.reason}`
      );
    });

    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    return report;
  }

  async runFullBackup() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...\n');

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const dirResult = await this.createBackupDirectory();
    this.results.push({ operation: 'create_directory', ...dirResult });

    if (!dirResult.success) {
      console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
      return;
    }

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Git
    const gitResult = await this.backupGitRepository();
    this.results.push({ operation: 'git_backup', ...gitResult });

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await this.backupDatabase();
    this.results.push({ operation: 'database_backup', ...dbResult });

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envResult = await this.backupEnvironmentFiles();
    this.results.push({ operation: 'environment_backup', ...envResult });

    // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–æ–≤
    const packageResult = await this.backupPackageFiles();
    this.results.push({ operation: 'package_backup', ...packageResult });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    const archiveResult = await this.createArchive();
    this.results.push({ operation: 'create_archive', ...archiveResult });

    const totalTime = Date.now() - startTime;
    console.log(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${totalTime}ms`);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const report = await this.generateReport();

    const successful = this.results.filter(r => r.success).length;
    if (successful === this.results.length) {
      console.log('\nüéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\n‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
    }

    return report;
  }
}

async function main() {
  const backup = new ProjectBackup();

  try {
    await backup.runFullBackup();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { ProjectBackup, main };
