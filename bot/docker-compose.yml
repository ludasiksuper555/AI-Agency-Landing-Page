version: '3.8'

services:
  # Main bot application
  techmoneybot:
    build: .
    container_name: techmoneybot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_ID=${ADMIN_ID}
      - MONGODB_URI=mongodb://mongo:27017/techmoneybot
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - UPWORK_CLIENT_ID=${UPWORK_CLIENT_ID}
      - UPWORK_CLIENT_SECRET=${UPWORK_CLIENT_SECRET}
      - FREELANCER_CLIENT_ID=${FREELANCER_CLIENT_ID}
      - FREELANCER_CLIENT_SECRET=${FREELANCER_CLIENT_SECRET}
      - FIVERR_API_KEY=${FIVERR_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
    depends_on:
      - mongo
      - redis
    networks:
      - botnet
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # MongoDB database
  mongo:
    image: mongo:6.0
    container_name: techmoneybot-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password123}
      - MONGO_INITDB_DATABASE=techmoneybot
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    ports:
      - '27017:27017'
    networks:
      - botnet
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: techmoneybot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - botnet
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: techmoneybot-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - techmoneybot
    networks:
      - botnet
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: techmoneybot-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - botnet
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: techmoneybot-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - botnet
    profiles:
      - monitoring

  # Backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: techmoneybot-backup
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/techmoneybot
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - ./backups:/app/backups
      - mongo_data:/data/db:ro
    depends_on:
      - mongo
    networks:
      - botnet
    profiles:
      - backup

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  botnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
