const { Scenes, Markup } = require('telegraf');
const logger = require('../utils/logger');
const { ValidationService } = require('../utils/validation');
const analyticsService = require('../services/analytics');
const proposalGeneratorService = require('../services/proposalGenerator');

const settingsScene = new Scenes.WizardScene(
  'settings-wizard',

  // Step 1: Main settings menu
  async ctx => {
    try {
      logger.userAction(ctx.from.id, 'settings_opened');

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'profile')],
        [Markup.button.callback('üîç –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É', 'search_settings')],
        [Markup.button.callback('ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI', 'ai_settings')],
        [Markup.button.callback('üì± –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è', 'notifications')],
        [Markup.button.callback('üîê –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ API', 'security')],
        [Markup.button.callback('üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö', 'export')],
        [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ', 'clear_data')],
        [Markup.button.callback('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')]
      ]);

      const userSettings = await this.getUserSettings(ctx.from.id);

      let message = '‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TechMoneyBot*\n\n';
      message += 'üìã *–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n\n';
      message += `üë§ **–Ü–º'—è:** ${userSettings.profile?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üíº **–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:** ${userSettings.profile?.specialization || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üîç **–ê–≤—Ç–æ–ø–æ—à—É–∫:** ${userSettings.search?.autoSearch ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
      message += `ü§ñ **AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è:** ${userSettings.ai?.enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
      message += `üì± **–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è:** ${userSettings.notifications?.enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n\n`;
      message += '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:';

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

      ctx.wizard.state.userSettings = userSettings;

      return ctx.wizard.next();
    } catch (error) {
      logger.errorWithContext(error, { userId: ctx.from.id, step: 'settings_main' });
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      return ctx.scene.leave();
    }
  },

  // Step 2: Handle settings category selection
  async ctx => {
    try {
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;

        switch (data) {
          case 'profile':
            await this.showProfileSettings(ctx);
            break;
          case 'search_settings':
            await this.showSearchSettings(ctx);
            break;
          case 'ai_settings':
            await this.showAISettings(ctx);
            break;
          case 'notifications':
            await this.showNotificationSettings(ctx);
            break;
          case 'security':
            await this.showSecuritySettings(ctx);
            break;
          case 'export':
            await this.exportUserData(ctx);
            break;
          case 'clear_data':
            await this.showClearDataConfirmation(ctx);
            break;
          case 'main_menu':
            await this.goToMainMenu(ctx);
            return ctx.scene.leave();
          default:
            await ctx.answerCbQuery('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è');
        }
      }
    } catch (error) {
      logger.errorWithContext(error, { userId: ctx.from.id, step: 'settings_category' });
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }
);

// Profile settings
settingsScene.showProfileSettings = async function (ctx) {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    const profile = userSettings.profile || {};

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", 'edit_name')],
      [Markup.button.callback('üíº –ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é', 'edit_specialization')],
      [Markup.button.callback('üí∞ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞–≤–∫–∏', 'edit_rates')],
      [Markup.button.callback('üåç –ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', 'edit_location')],
      [Markup.button.callback('üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±—ñ–æ', 'edit_bio')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    let message = 'üë§ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é*\n\n';
    message += `**–Ü–º'—è:** ${profile.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `**–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è:** ${profile.specialization || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `**–ì–æ–¥–∏–Ω–Ω–∞ —Å—Ç–∞–≤–∫–∞:** $${profile.hourlyRate || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}/–≥–æ–¥\n`;
    message += `**–õ–æ–∫–∞—Ü—ñ—è:** ${profile.location || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `**–î–æ—Å–≤—ñ–¥:** ${profile.experience || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} —Ä–æ–∫—ñ–≤\n`;
    message += `**–ë—ñ–æ:** ${profile.bio ? profile.bio.substring(0, 100) + '...' : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n`;
    message += '–û–±–µ—Ä—ñ—Ç—å —â–æ –∑–º—ñ–Ω–∏—Ç–∏:';

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_profile_settings' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é');
  }
};

// Search settings
settingsScene.showSearchSettings = async function (ctx) {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    const search = userSettings.search || {};

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          search.autoSearch ? 'üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ø–æ—à—É–∫' : 'üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–ø–æ—à—É–∫',
          'toggle_auto_search'
        )
      ],
      [Markup.button.callback('üîç –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞', 'edit_keywords')],
      [Markup.button.callback('üí∞ –î—ñ–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç—É', 'edit_budget_range')],
      [Markup.button.callback('üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏', 'edit_platforms')],
      [Markup.button.callback('‚è∞ –†–æ–∑–∫–ª–∞–¥ –ø–æ—à—É–∫—É', 'edit_schedule')],
      [Markup.button.callback('üéØ –§—ñ–ª—å—Ç—Ä–∏ —è–∫–æ—Å—Ç—ñ', 'edit_filters')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    let message = 'üîç *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É*\n\n';
    message += `**–ê–≤—Ç–æ–ø–æ—à—É–∫:** ${search.autoSearch ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
    message += `**–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:** ${search.keywords?.join(', ') || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `**–ë—é–¥–∂–µ—Ç:** $${search.minBudget || 0} - $${search.maxBudget || '‚àû'}\n`;
    message += `**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∏:** ${search.platforms?.join(', ') || '–í—Å—ñ'}\n`;
    message += `**–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—à—É–∫—É:** ${search.frequency || '–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏'}\n`;
    message += `**–ú—ñ–Ω. —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—ñ—î–Ω—Ç–∞:** ${search.minClientRating || '–ë—É–¥—å-—è–∫–∏–π'}\n\n`;
    message += '–û–±–µ—Ä—ñ—Ç—å —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:';

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_search_settings' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ—à—É–∫—É');
  }
};

// AI settings
settingsScene.showAISettings = async function (ctx) {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    const ai = userSettings.ai || {};

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(ai.enabled ? 'üî¥ –í–∏–º–∫–Ω—É—Ç–∏ AI' : 'üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ AI', 'toggle_ai')],
      [Markup.button.callback('üé® –°—Ç–∏–ª—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π', 'edit_proposal_style')],
      [Markup.button.callback('üìè –î–æ–≤–∂–∏–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π', 'edit_proposal_length')],
      [Markup.button.callback('üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è', 'edit_personalization')],
      [Markup.button.callback('üìù –®–∞–±–ª–æ–Ω–∏', 'manage_templates')],
      [Markup.button.callback('ü§ñ –ú–æ–¥–µ–ª—å AI', 'edit_ai_model')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    let message = 'ü§ñ *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI*\n\n';
    message += `**AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è:** ${ai.enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
    message += `**–°—Ç–∏–ª—å:** ${ai.style || '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π'}\n`;
    message += `**–î–æ–≤–∂–∏–Ω–∞:** ${ai.length || '–°–µ—Ä–µ–¥–Ω—è'}\n`;
    message += `**–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è:** ${ai.personalization ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
    message += `**–ú–æ–¥–µ–ª—å:** ${ai.model || 'GPT-3.5-turbo'}\n`;
    message += `**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** ${ai.temperature || 0.7}\n\n`;
    message += '–û–±–µ—Ä—ñ—Ç—å —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:';

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_ai_settings' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å AI');
  }
};

// Notification settings
settingsScene.showNotificationSettings = async function (ctx) {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    const notifications = userSettings.notifications || {};

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          notifications.enabled ? 'üî¥ –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è' : 'üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
          'toggle_notifications'
        )
      ],
      [Markup.button.callback('üîç –ù–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏', 'toggle_new_projects')],
      [Markup.button.callback('üìä –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏', 'toggle_daily_reports')],
      [Markup.button.callback('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏ —Å–∏—Å—Ç–µ–º–∏', 'toggle_system_alerts')],
      [Markup.button.callback('üéØ –£—Å–ø—ñ—à–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', 'toggle_success_alerts')],
      [Markup.button.callback('‚è∞ –†–æ–∑–∫–ª–∞–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å', 'edit_notification_schedule')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    let message = 'üì± *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å*\n\n';
    message += `**–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è:** ${notifications.enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
    message += `**–ù–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏:** ${notifications.newProjects ? '‚úÖ' : '‚ùå'}\n`;
    message += `**–©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏:** ${notifications.dailyReports ? '‚úÖ' : '‚ùå'}\n`;
    message += `**–°–∏—Å—Ç–µ–º–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:** ${notifications.systemAlerts ? '‚úÖ' : '‚ùå'}\n`;
    message += `**–£—Å–ø—ñ—à–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:** ${notifications.successAlerts ? '‚úÖ' : '‚ùå'}\n`;
    message += `**–ß–∞—Å –∑–≤—ñ—Ç—ñ–≤:** ${notifications.reportTime || '09:00'}\n\n`;
    message += '–û–±–µ—Ä—ñ—Ç—å —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:';

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_notification_settings' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å');
  }
};

// Security settings
settingsScene.showSecuritySettings = async function (ctx) {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    const security = userSettings.security || {};

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîë API –∫–ª—é—á—ñ', 'manage_api_keys')],
      [Markup.button.callback('üõ°Ô∏è –î–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è', 'toggle_2fa')],
      [Markup.button.callback('üìã –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ', 'view_activity_log')],
      [Markup.button.callback('üîí –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å', 'change_password')],
      [Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', 'manage_blocked_users')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    let message = 'üîê *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏*\n\n';
    message += `**API –∫–ª—é—á—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ:** ${security.apiKeysConfigured ? '‚úÖ' : '‚ùå'}\n`;
    message += `**2FA:** ${security.twoFactorEnabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
    message += `**–û—Å—Ç–∞–Ω–Ω—ñ–π –≤—Ö—ñ–¥:** ${security.lastLogin || '–ù–µ–≤—ñ–¥–æ–º–æ'}\n`;
    message += `**–ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π:** ${security.activeSessions || 1}\n\n`;
    message += '‚ö†Ô∏è *–í–∞–∂–ª–∏–≤–æ:* –¢—Ä–∏–º–∞–π—Ç–µ –≤–∞—à—ñ API –∫–ª—é—á—ñ –≤ –±–µ–∑–ø–µ—Ü—ñ!\n\n';
    message += '–û–±–µ—Ä—ñ—Ç—å —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:';

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_security_settings' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏');
  }
};

// Export user data
settingsScene.exportUserData = async function (ctx) {
  try {
    await ctx.answerCbQuery('üìä –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö...');

    const userId = ctx.from.id;
    const exportData = {
      profile: ctx.wizard.state.userSettings.profile || {},
      settings: ctx.wizard.state.userSettings,
      statistics: await analyticsService.getUserStats(userId),
      searchHistory: await this.getSearchHistory(userId),
      proposalHistory: await proposalGeneratorService.getProposalHistory(userId),
      exportDate: new Date().toISOString()
    };

    const exportText = JSON.stringify(exportData, null, 2);

    // Create a temporary file-like message
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ —Ñ–∞–π–ª', 'save_as_file')],
      [Markup.button.callback('üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç', 'show_as_text')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(
      'üìä *–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∏–π*\n\n' +
        `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
        `- –ü–æ—à—É–∫—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ: ${exportData.statistics.totalSearches || 0}\n` +
        `- –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${exportData.statistics.totalProposals || 0}\n` +
        `- –ü—Ä–æ–µ–∫—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: ${exportData.statistics.totalProjects || 0}\n\n` +
        '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É:',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );

    ctx.wizard.state.exportData = exportText;

    logger.userAction(userId, 'data_exported', {
      dataSize: exportText.length,
      sections: Object.keys(exportData)
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'export_data' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö');
  }
};

// Clear data confirmation
settingsScene.showClearDataConfirmation = async function (ctx) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É', 'clear_search_history')],
      [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π', 'clear_proposal_history')],
      [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'clear_statistics')],
      [Markup.button.callback('üí• –û–ß–ò–°–¢–ò–¢–ò –í–°–ï', 'clear_all_data')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);

    await ctx.editMessageText(
      'üóëÔ∏è *–û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö*\n\n' +
        '‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!\n\n' +
        '–û–±–µ—Ä—ñ—Ç—å —â–æ –æ—á–∏—Å—Ç–∏—Ç–∏:\n\n' +
        'üìã **–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É** - –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ—à—É–∫–∏\n' +
        'üìù **–Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π** - –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n' +
        'üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - —Å–∫–∏–Ω–µ –≤—Å—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É\n' +
        'üí• **–í–°–ï** - –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö\n\n' +
        'üîí –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ API –∫–ª—é—á—ñ –ù–ï –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ.',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'show_clear_confirmation' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –æ—á–∏—â–µ–Ω–Ω—è');
  }
};

// Go to main menu
settingsScene.goToMainMenu = async function (ctx) {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîç –ü–æ—à—É–∫ –ø—Ä–æ–µ–∫—Ç—ñ–≤', 'search')],
      [Markup.button.callback('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π', 'proposals')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', 'settings')]
    ]);

    await ctx.editMessageText('üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é TechMoneyBot*\n\n' + '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'go_to_main_menu' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é');
  }
};

// Helper method to get user settings
settingsScene.getUserSettings = async function (userId) {
  try {
    // This would typically load from database
    // For now, return default settings
    return {
      profile: {
        name: null,
        specialization: null,
        hourlyRate: null,
        location: null,
        experience: null,
        bio: null
      },
      search: {
        autoSearch: false,
        keywords: [],
        minBudget: null,
        maxBudget: null,
        platforms: ['upwork', 'freelancer', 'fiverr'],
        frequency: 'every_2_hours',
        minClientRating: null
      },
      ai: {
        enabled: true,
        style: 'professional',
        length: 'medium',
        personalization: true,
        model: 'gpt-3.5-turbo',
        temperature: 0.7
      },
      notifications: {
        enabled: true,
        newProjects: true,
        dailyReports: true,
        systemAlerts: true,
        successAlerts: true,
        reportTime: '09:00'
      },
      security: {
        apiKeysConfigured: false,
        twoFactorEnabled: false,
        lastLogin: null,
        activeSessions: 1
      }
    };
  } catch (error) {
    logger.errorWithContext(error, { userId, action: 'get_user_settings' });
    throw error;
  }
};

// Helper method to get search history
settingsScene.getSearchHistory = async function (userId) {
  try {
    // This would typically load from database
    return [];
  } catch (error) {
    logger.errorWithContext(error, { userId, action: 'get_search_history' });
    return [];
  }
};

// Handle various callback actions
settingsScene.action('back_to_main', async ctx => {
  try {
    await ctx.scene.reenter();
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'back_to_main' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é');
  }
});

settingsScene.action('toggle_auto_search', async ctx => {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    userSettings.search.autoSearch = !userSettings.search.autoSearch;

    // Save settings to database here

    await ctx.answerCbQuery(
      userSettings.search.autoSearch ? '‚úÖ –ê–≤—Ç–æ–ø–æ—à—É–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –ê–≤—Ç–æ–ø–æ—à—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ'
    );

    await this.showSearchSettings(ctx);

    logger.userAction(ctx.from.id, 'auto_search_toggled', {
      enabled: userSettings.search.autoSearch
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'toggle_auto_search' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
  }
});

settingsScene.action('toggle_ai', async ctx => {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    userSettings.ai.enabled = !userSettings.ai.enabled;

    // Save settings to database here

    await ctx.answerCbQuery(userSettings.ai.enabled ? '‚úÖ AI —É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå AI –≤–∏–º–∫–Ω–µ–Ω–æ');

    await this.showAISettings(ctx);

    logger.userAction(ctx.from.id, 'ai_toggled', {
      enabled: userSettings.ai.enabled
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'toggle_ai' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
  }
});

settingsScene.action('toggle_notifications', async ctx => {
  try {
    const userSettings = ctx.wizard.state.userSettings;
    userSettings.notifications.enabled = !userSettings.notifications.enabled;

    // Save settings to database here

    await ctx.answerCbQuery(
      userSettings.notifications.enabled ? '‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ'
    );

    await this.showNotificationSettings(ctx);

    logger.userAction(ctx.from.id, 'notifications_toggled', {
      enabled: userSettings.notifications.enabled
    });
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'toggle_notifications' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
  }
});

settingsScene.action('clear_search_history', async ctx => {
  try {
    // Clear search history from database

    await ctx.answerCbQuery('‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É –æ—á–∏—â–µ–Ω–æ');

    logger.userAction(ctx.from.id, 'search_history_cleared');

    await this.showClearDataConfirmation(ctx);
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'clear_search_history' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó');
  }
});

settingsScene.action('clear_proposal_history', async ctx => {
  try {
    // Clear proposal history from database

    await ctx.answerCbQuery('‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –æ—á–∏—â–µ–Ω–æ');

    logger.userAction(ctx.from.id, 'proposal_history_cleared');

    await this.showClearDataConfirmation(ctx);
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'clear_proposal_history' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó');
  }
});

settingsScene.action('clear_statistics', async ctx => {
  try {
    // Clear statistics from database
    await analyticsService.resetUserStats(ctx.from.id);

    await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—â–µ–Ω–æ');

    logger.userAction(ctx.from.id, 'statistics_cleared');

    await this.showClearDataConfirmation(ctx);
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'clear_statistics' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

settingsScene.action('clear_all_data', async ctx => {
  try {
    // Show final confirmation
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí• –¢–ê–ö, –û–ß–ò–°–¢–ò–¢–ò –í–°–ï', 'confirm_clear_all')],
      [Markup.button.callback('‚ùå –ù–Ü, –°–ö–ê–°–£–í–ê–¢–ò', 'back_to_main')]
    ]);

    await ctx.editMessageText(
      'üí• *–û–°–¢–ê–¢–û–ß–ù–ï –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø*\n\n' +
        '‚ö†Ô∏è **–í–ò –í–ü–ï–í–ù–ï–ù–Ü?**\n\n' +
        '–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å:\n' +
        '‚Ä¢ –í—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—ñ–≤\n' +
        '‚Ä¢ –í—Å—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n' +
        '‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É\n' +
        '‚Ä¢ –í—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\n\n' +
        'üîí **–ù–ï –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:**\n' +
        '‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n' +
        '‚Ä¢ API –∫–ª—é—á—ñ\n' +
        '‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏\n\n' +
        '‚ùó **–¶–Ø –î–Ü–Ø –ù–ï–ó–í–û–†–û–¢–ù–ê!**',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      }
    );
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'clear_all_data' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è');
  }
});

settingsScene.action('confirm_clear_all', async ctx => {
  try {
    const userId = ctx.from.id;

    // Clear all user data except profile and security settings
    // This would involve multiple database operations

    await ctx.editMessageText(
      '‚úÖ *–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ*\n\n' +
        '–í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, –æ–∫—Ä—ñ–º:\n' +
        '‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ—Ñ—ñ–ª—é\n' +
        '‚Ä¢ API –∫–ª—é—á—ñ–≤\n' +
        '‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏\n\n' +
        '–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ!',
      { parse_mode: 'Markdown' }
    );

    logger.userAction(userId, 'all_data_cleared');

    // Return to main menu after 3 seconds
    setTimeout(async () => {
      try {
        await this.goToMainMenu(ctx);
      } catch (error) {
        logger.errorWithContext(error, { userId, action: 'delayed_main_menu' });
      }
    }, 3000);
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'confirm_clear_all' });
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
  }
});

// Handle scene leave
settingsScene.leave(async ctx => {
  try {
    logger.userAction(ctx.from.id, 'settings_scene_left');

    // Clean up session data if needed
    if (ctx.session.settingsInProgress) {
      delete ctx.session.settingsInProgress;
    }
  } catch (error) {
    logger.errorWithContext(error, { userId: ctx.from.id, action: 'scene_leave' });
  }
});

module.exports = settingsScene;
