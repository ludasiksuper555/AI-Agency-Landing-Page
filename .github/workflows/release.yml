name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.0.0"
            exit 1
          fi

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            CHANGELOG=$(awk "/^## \[${VERSION#v}\]/,/^## \[/{if(/^## \[${VERSION#v}\]/) p=1; else if(/^## \[/ && p) exit; if(p && !/^## \[${VERSION#v}\]/) print}" CHANGELOG.md)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="Release ${VERSION}"
            fi
          else
            CHANGELOG="Release ${VERSION}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Build and test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

      - name: Create build archive
        run: |
          tar -czf build-${{ needs.validate.outputs.version }}.tar.gz .next/ public/ package.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build-${{ needs.validate.outputs.version }}.tar.gz

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body: |
            ## Changes

            ${{ needs.validate.outputs.changelog }}

            ## Installation

            ```bash
            npm install
            npm run build
            npm start
            ```

            ## Docker

            ```bash
            docker pull ghcr.io/ai-agency-team/ai-agency-landing-page:${{ needs.validate.outputs.version }}
            ```

            ## Full Changelog

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.previous.outputs.tag }}...${{ needs.validate.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-${{ needs.validate.outputs.version }}.tar.gz
          asset_name: ai-agency-landing-page-${{ needs.validate.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: ${{ !contains(needs.validate.outputs.version, '-') }}
    environment:
      name: production
      url: https://ai-agency.com
    steps:
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [validate, release, deploy]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          message: |
            ðŸš€ Release ${{ needs.validate.outputs.version }} has been ${{ job.status == 'success' && 'successfully deployed' || 'failed' }}!

            ðŸ“‹ **Changes:**
            ${{ needs.validate.outputs.changelog }}

            ðŸ”— **Links:**
            â€¢ [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }})
            â€¢ [Production Site](https://ai-agency.com)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
