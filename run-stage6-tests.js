#!/usr/bin/env node
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç-–∫–µ–π—Å—ñ–≤ –¥–ª—è –ï—Ç–∞–ø—É 6: PWA —Ç–∞ –ë–µ–∑–ø–µ–∫–∞
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * node run-stage6-tests.js
 *
 * –∞–±–æ
 *
 * npm run test:stage6
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
const log = {
  info: msg => console.log(`${colors.blue}‚Ñπ ${msg}${colors.reset}`),
  success: msg => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: msg => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: msg => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  header: msg => console.log(`${colors.magenta}üöÄ ${msg}${colors.reset}`),
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
const testResults = {
  security: {},
  pwa: {},
  integration: {},
  metrics: {},
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  log.info(`–í–∏–∫–æ–Ω–∞–Ω–Ω—è: ${description}`);
  try {
    const result = execSync(command, {
      encoding: 'utf8',
      stdio: 'pipe',
    });
    log.success(`${description} - –ü–†–û–ô–î–ï–ù–û`);
    return { success: true, output: result };
  } catch (error) {
    log.error(`${description} - –ü–†–û–í–ê–õ–ï–ù–û: ${error.message}`);
    return { success: false, error: error.message, output: error.stdout };
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
function checkFileExists(filePath, description) {
  if (fs.existsSync(filePath)) {
    log.success(`${description} - —Ñ–∞–π–ª —ñ—Å–Ω—É—î`);
    return true;
  } else {
    log.error(`${description} - —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`);
    return false;
  }
}

// TC-SEC-001: –ê—É–¥–∏—Ç –±–µ–∑–ø–µ–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
function testSecurityAudit() {
  log.header('TC-SEC-001: –ê—É–¥–∏—Ç –ë–µ–∑–ø–µ–∫–∏ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π');

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json
  if (!checkFileExists('package.json', 'package.json')) {
    testResults.security['TC-SEC-001'] = { success: false, reason: 'package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
    return;
  }

  // –ó–∞–ø—É—Å–∫ npm audit
  const auditResult = runCommand('npm audit --audit-level=high', 'npm audit (high level)');

  if (auditResult.success) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ñ —É—è–∑–≤–∏–º–æ—Å—Ç—ñ
    const criticalVulns =
      auditResult.output.includes('critical') || auditResult.output.includes('high');
    if (!criticalVulns) {
      testResults.security['TC-SEC-001'] = {
        success: true,
        details: '–ù–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
      };
    } else {
      testResults.security['TC-SEC-001'] = {
        success: false,
        reason: '–ó–Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —É—è–∑–≤–∏–º–æ—Å—Ç—ñ',
      };
    }
  } else {
    testResults.security['TC-SEC-001'] = { success: false, reason: auditResult.error };
  }
}

// TC-SEC-002: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSP —Ñ–∞–π–ª—ñ–≤
function testCSPConfiguration() {
  log.header('TC-SEC-002: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSP –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');

  const securityFiles = ['middleware.ts', 'middleware/security.ts', 'next.config.js'];

  let cspConfigFound = false;

  securityFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('Content-Security-Policy') || content.includes('CSP')) {
        log.success(`CSP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ ${file}`);
        cspConfigFound = true;
      }
    }
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É –Ω–∞ CSP –∑–º—ñ–Ω–Ω—ñ
  if (fs.existsSync('.env')) {
    const envContent = fs.readFileSync('.env', 'utf8');
    const cspVars = ['CSP_SCRIPT_SRC', 'CSP_STYLE_SRC', 'CSP_FONT_SRC', 'CSP_IMG_SRC'];

    const foundVars = cspVars.filter(varName => envContent.includes(varName));
    if (foundVars.length > 0) {
      log.success(`CSP –∑–º—ñ–Ω–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ .env: ${foundVars.join(', ')}`);
      cspConfigFound = true;
    }
  }

  testResults.security['TC-SEC-002'] = {
    success: cspConfigFound,
    details: cspConfigFound ? 'CSP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∏—Å—É—Ç–Ω—è' : 'CSP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞',
  };
}

// TC-SEC-003: Rate Limiting
function testRateLimiting() {
  log.header('TC-SEC-003: Rate Limiting –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è');

  const rateLimitFiles = [
    'middleware/rateLimiting.ts',
    'lib/rateLimiting.ts',
    'pages/api/middleware.ts',
  ];

  let rateLimitFound = false;

  rateLimitFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('rate') && (content.includes('limit') || content.includes('throttle'))) {
        log.success(`Rate limiting –∑–Ω–∞–π–¥–µ–Ω–æ –≤ ${file}`);
        rateLimitFound = true;
      }
    }
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json –Ω–∞ rate limiting –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
  if (fs.existsSync('package.json')) {
    const packageContent = fs.readFileSync('package.json', 'utf8');
    const rateLimitDeps = ['express-rate-limit', 'rate-limiter-flexible', 'bottleneck'];

    const foundDeps = rateLimitDeps.filter(dep => packageContent.includes(dep));
    if (foundDeps.length > 0) {
      log.success(`Rate limiting –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: ${foundDeps.join(', ')}`);
      rateLimitFound = true;
    }
  }

  testResults.security['TC-SEC-003'] = {
    success: rateLimitFound,
    details: rateLimitFound ? 'Rate limiting –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' : 'Rate limiting –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
  };
}

// TC-PWA-001: Service Worker
function testServiceWorker() {
  log.header('TC-PWA-001: Service Worker –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞');

  const swFiles = ['public/sw.js', 'public/service-worker.js', 'sw.js'];

  let swFound = false;

  swFiles.forEach(file => {
    if (checkFileExists(file, `Service Worker (${file})`)) {
      swFound = true;

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É Service Worker
      const swContent = fs.readFileSync(file, 'utf8');
      const features = {
        caching: swContent.includes('cache') || swContent.includes('Cache'),
        offline: swContent.includes('offline') || swContent.includes('fetch'),
        backgroundSync: swContent.includes('sync') || swContent.includes('background'),
        pushNotifications: swContent.includes('push') || swContent.includes('notification'),
      };

      Object.entries(features).forEach(([feature, found]) => {
        if (found) {
          log.success(`Service Worker –ø—ñ–¥—Ç—Ä–∏–º—É—î: ${feature}`);
        } else {
          log.warning(`Service Worker –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î: ${feature}`);
        }
      });
    }
  });

  testResults.pwa['TC-PWA-001'] = {
    success: swFound,
    details: swFound ? 'Service Worker –∑–Ω–∞–π–¥–µ–Ω–æ' : 'Service Worker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
  };
}

// TC-PWA-002: Web App Manifest
function testWebAppManifest() {
  log.header('TC-PWA-002: Web App Manifest –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞');

  const manifestFiles = ['public/manifest.json', 'public/site.webmanifest', 'manifest.json'];

  let manifestFound = false;

  manifestFiles.forEach(file => {
    if (checkFileExists(file, `Manifest (${file})`)) {
      manifestFound = true;

      try {
        const manifestContent = JSON.parse(fs.readFileSync(file, 'utf8'));

        const requiredFields = ['name', 'short_name', 'start_url', 'display', 'icons'];
        const missingFields = requiredFields.filter(field => !manifestContent[field]);

        if (missingFields.length === 0) {
          log.success("–í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è manifest –ø—Ä–∏—Å—É—Ç–Ω—ñ");

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–∫–æ–Ω–æ–∫
          if (manifestContent.icons && manifestContent.icons.length > 0) {
            log.success(`–ó–Ω–∞–π–¥–µ–Ω–æ ${manifestContent.icons.length} —ñ–∫–æ–Ω–æ–∫`);

            const iconSizes = manifestContent.icons.map(icon => icon.sizes).join(', ');
            log.info(`–†–æ–∑–º—ñ—Ä–∏ —ñ–∫–æ–Ω–æ–∫: ${iconSizes}`);
          }
        } else {
          log.error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –≤ manifest: ${missingFields.join(', ')}`);
        }
      } catch (error) {
        log.error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É manifest: ${error.message}`);
        manifestFound = false;
      }
    }
  });

  testResults.pwa['TC-PWA-002'] = {
    success: manifestFound,
    details: manifestFound
      ? 'Web App Manifest –≤–∞–ª—ñ–¥–Ω–∏–π'
      : 'Web App Manifest –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π',
  };
}

// TC-PWA-003: PWA –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
function testPWAComponents() {
  log.header('TC-PWA-003: PWA –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞');

  const pwaComponents = [
    'components/PWAInstallPrompt.tsx',
    'hooks/usePWA.ts',
    'hooks/usePWA.tsx',
    'pages/offline.tsx',
    'pages/share.tsx',
  ];

  let componentsFound = 0;

  pwaComponents.forEach(component => {
    if (checkFileExists(component, `PWA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (${component})`)) {
      componentsFound++;
    }
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ _app.tsx –Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é PWA
  if (fs.existsSync('pages/_app.tsx')) {
    const appContent = fs.readFileSync('pages/_app.tsx', 'utf8');
    if (appContent.includes('PWA') || appContent.includes('usePWA')) {
      log.success('PWA —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ –≤ _app.tsx');
      componentsFound++;
    }
  }

  const success = componentsFound >= 3; // –ú—ñ–Ω—ñ–º—É–º 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏

  testResults.pwa['TC-PWA-003'] = {
    success,
    details: `–ó–Ω–∞–π–¥–µ–Ω–æ ${componentsFound} PWA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤`,
  };
}

// TC-PWA-004: –û—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function testOfflinePages() {
  log.header('TC-PWA-004: –û—Ñ–ª–∞–π–Ω –°—Ç–æ—Ä—ñ–Ω–∫–∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞');

  const offlineFiles = ['pages/offline.tsx', 'pages/offline.js', 'public/offline.html'];

  let offlineFound = false;

  offlineFiles.forEach(file => {
    if (checkFileExists(file, `–û—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (${file})`)) {
      offlineFound = true;
    }
  });

  testResults.pwa['TC-PWA-004'] = {
    success: offlineFound,
    details: offlineFound ? '–û—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞' : '–û—Ñ–ª–∞–π–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞',
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
function generateReport() {
  log.header('üìä –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–í–Ü–¢–£ –¢–ï–°–¢–£–í–ê–ù–ù–Ø');

  const report = {
    timestamp: new Date().toISOString(),
    stage: 'Stage 6: PWA —Ç–∞ –ë–µ–∑–ø–µ–∫–∞',
    results: testResults,
    summary: {
      total: 0,
      passed: 0,
      failed: 0,
      passRate: 0,
    },
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Object.values(testResults).forEach(category => {
    Object.values(category).forEach(test => {
      report.summary.total++;
      if (test.success) {
        report.summary.passed++;
      } else {
        report.summary.failed++;
      }
    });
  });

  report.summary.passRate = Math.round((report.summary.passed / report.summary.total) * 100);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
  const reportPath = 'STAGE_6_TEST_REPORT.json';
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Markdown –∑–≤—ñ—Ç—É
  const markdownReport = generateMarkdownReport(report);
  fs.writeFileSync('STAGE_6_TEST_REPORT.md', markdownReport);

  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  console.log('\n' + '='.repeat(60));
  log.header('–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ï–¢–ê–ü–£ 6');
  console.log('='.repeat(60));

  console.log(`\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: ${report.summary.total}`);
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${colors.green}${report.summary.passed}${colors.reset}`);
  console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${colors.red}${report.summary.failed}${colors.reset}`);
  console.log(
    `   –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: ${report.summary.passRate >= 80 ? colors.green : colors.red}${report.summary.passRate}%${colors.reset}`
  );

  console.log(`\nüîí –ë–µ–∑–ø–µ–∫–∞:`);
  Object.entries(testResults.security).forEach(([testId, result]) => {
    const status = result.success
      ? `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù–û${colors.reset}`
      : `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù–û${colors.reset}`;
    console.log(`   ${testId}: ${status} - ${result.details || result.reason}`);
  });

  console.log(`\nüì± PWA:`);
  Object.entries(testResults.pwa).forEach(([testId, result]) => {
    const status = result.success
      ? `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù–û${colors.reset}`
      : `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù–û${colors.reset}`;
    console.log(`   ${testId}: ${status} - ${result.details || result.reason}`);
  });

  console.log(`\nüìÑ –ó–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:`);
  console.log(`   JSON: ${reportPath}`);
  console.log(`   Markdown: STAGE_6_TEST_REPORT.md`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
  if (report.summary.passRate < 100) {
    console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:`);
    Object.entries(testResults).forEach(([category, tests]) => {
      Object.entries(tests).forEach(([testId, result]) => {
        if (!result.success) {
          console.log(`   ${colors.yellow}‚ö†Ô∏è${colors.reset} ${testId}: ${result.reason}`);
        }
      });
    });
  }

  console.log('\n' + '='.repeat(60));

  return report;
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Markdown –∑–≤—ñ—Ç—É
function generateMarkdownReport(report) {
  return `# –ó–≤—ñ—Ç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ï—Ç–∞–ø 6: PWA —Ç–∞ –ë–µ–∑–ø–µ–∫–∞

**–î–∞—Ç–∞:** ${new Date(report.timestamp).toLocaleString('uk-UA')}
**–ï—Ç–∞–ø:** ${report.stage}

## üìä –ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤:** ${report.summary.total}
- **–ü—Ä–æ–π–¥–µ–Ω–æ:** ${report.summary.passed}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** ${report.summary.failed}
- **–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É:** ${report.summary.passRate}%

## üîí –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ Security –¢–µ—Å—Ç—ñ–≤

${Object.entries(report.results.security)
  .map(
    ([testId, result]) =>
      `### ${testId}
- **–°—Ç–∞—Ç—É—Å:** ${result.success ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}
- **–î–µ—Ç–∞–ª—ñ:** ${result.details || result.reason}
`
  )
  .join('\n')}

## üì± –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ PWA –¢–µ—Å—Ç—ñ–≤

${Object.entries(report.results.pwa)
  .map(
    ([testId, result]) =>
      `### ${testId}
- **–°—Ç–∞—Ç—É—Å:** ${result.success ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}
- **–î–µ—Ç–∞–ª—ñ:** ${result.details || result.reason}
`
  )
  .join('\n')}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

${Object.entries(report.results)
  .map(([category, tests]) =>
    Object.entries(tests)
      .filter(([, result]) => !result.success)
      .map(([testId, result]) => `- **${testId}:** ${result.reason}`)
      .join('\n')
  )
  .filter(rec => rec)
  .join('\n')}

## üéØ –ù–∞—Å—Ç—É–ø–Ω—ñ –ö—Ä–æ–∫–∏

1. –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ñ —Ç–µ—Å—Ç–∏
2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ production
4. –ü—Ä–æ–≤–µ—Å—Ç–∏ manual —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ

---

*–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ*
`;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
  console.log(`${colors.magenta}üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ï–¢–ê–ü–£ 6: PWA –¢–ê –ë–ï–ó–ü–ï–ö–ê${colors.reset}`);
  console.log('='.repeat(60));

  try {
    // –ë–ª–æ–∫ 1: Security —Ç–µ—Å—Ç–∏
    log.header('üîí –ë–õ–û–ö 1: –¢–ï–°–¢–ò –ë–ï–ó–ü–ï–ö–ò');
    testSecurityAudit();
    testCSPConfiguration();
    testRateLimiting();

    // –ë–ª–æ–∫ 2: PWA —Ç–µ—Å—Ç–∏
    log.header('üì± –ë–õ–û–ö 2: PWA –¢–ï–°–¢–ò');
    testServiceWorker();
    testWebAppManifest();
    testPWAComponents();
    testOfflinePages();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
    const report = generateReport();

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è exit code
    const exitCode = report.summary.passRate >= 80 ? 0 : 1;

    if (exitCode === 0) {
      log.success('üéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!');
    } else {
      log.error('‚ùå –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò!');
    }

    process.exit(exitCode);
  } catch (error) {
    log.error(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
  main();
}

module.exports = {
  main,
  testResults,
  generateReport,
};
