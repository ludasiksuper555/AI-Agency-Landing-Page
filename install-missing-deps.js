const { execSync } = require('child_process');
const fs = require('fs');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
 * –í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–º–∏–ª–∫–∏ "Cannot find module"
 */

const missingDependencies = [
  // Storybook –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
  '@storybook/react',
  '@storybook/addon-essentials',
  '@storybook/addon-interactions',
  '@storybook/addon-links',
  '@storybook/blocks',
  '@storybook/testing-library',

  // Chakra UI –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
  '@chakra-ui/react',
  '@chakra-ui/icons',
  '@chakra-ui/system',
  '@emotion/react',
  '@emotion/styled',

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–∏–ø—ñ–≤
  '@types/react',
  '@types/react-dom',
  '@types/node',
];

const devDependencies = [
  '@storybook/react',
  '@storybook/addon-essentials',
  '@storybook/addon-interactions',
  '@storybook/addon-links',
  '@storybook/blocks',
  '@storybook/testing-library',
  '@types/react',
  '@types/react-dom',
  '@types/node',
];

function checkPackageJson() {
  try {
    const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    console.log('üì¶ –ü–æ—Ç–æ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:');
    console.log('Dependencies:', Object.keys(packageJson.dependencies || {}).length);
    console.log('DevDependencies:', Object.keys(packageJson.devDependencies || {}).length);
    return packageJson;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è package.json:', error.message);
    return null;
  }
}

function installDependencies() {
  console.log('üöÄ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

  try {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ production –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    const prodDeps = missingDependencies.filter(dep => !devDependencies.includes(dep));
    if (prodDeps.length > 0) {
      console.log('üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è production –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
      const prodCommand = `npm install ${prodDeps.join(' ')}`;
      console.log(`–í–∏–∫–æ–Ω–∞–Ω–Ω—è: ${prodCommand}`);
      execSync(prodCommand, { stdio: 'inherit' });
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ dev –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if (devDependencies.length > 0) {
      console.log('üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è dev –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
      const devCommand = `npm install --save-dev ${devDependencies.join(' ')}`;
      console.log(`–í–∏–∫–æ–Ω–∞–Ω–Ω—è: ${devCommand}`);
      execSync(devCommand, { stdio: 'inherit' });
    }

    console.log('‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:', error.message);
    return false;
  }
}

function updateTsConfig() {
  try {
    console.log('üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è tsconfig.json...');

    const tsConfigPath = './tsconfig.json';
    if (fs.existsSync(tsConfigPath)) {
      const tsConfig = JSON.parse(fs.readFileSync(tsConfigPath, 'utf8'));

      // –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Chakra UI —Ç–∞ Emotion
      if (!tsConfig.compilerOptions) {
        tsConfig.compilerOptions = {};
      }

      tsConfig.compilerOptions.jsx = 'preserve';
      tsConfig.compilerOptions.jsxImportSource = '@emotion/react';

      // –î–æ–¥–∞—î–º–æ —Ç–∏–ø–∏
      if (!tsConfig.compilerOptions.types) {
        tsConfig.compilerOptions.types = [];
      }

      const newTypes = ['node', 'react', 'react-dom'];
      newTypes.forEach(type => {
        if (!tsConfig.compilerOptions.types.includes(type)) {
          tsConfig.compilerOptions.types.push(type);
        }
      });

      fs.writeFileSync(tsConfigPath, JSON.stringify(tsConfig, null, 2));
      console.log('‚úÖ tsconfig.json –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }
  } catch (error) {
    console.error('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è tsconfig.json:', error.message);
  }
}

function createChakraTheme() {
  const themeContent = `import { extendTheme } from '@chakra-ui/react';

const theme = extendTheme({
  colors: {
    brand: {
      50: '#f7fafc',
      100: '#edf2f7',
      200: '#e2e8f0',
      300: '#cbd5e0',
      400: '#a0aec0',
      500: '#718096',
      600: '#4a5568',
      700: '#2d3748',
      800: '#1a202c',
      900: '#171923',
    },
  },
  fonts: {
    heading: 'Inter, sans-serif',
    body: 'Inter, sans-serif',
  },
  components: {
    Button: {
      defaultProps: {
        colorScheme: 'brand',
      },
    },
  },
});

export default theme;
`;

  try {
    const themePath = './styles/theme.ts';
    if (!fs.existsSync('./styles')) {
      fs.mkdirSync('./styles', { recursive: true });
    }

    if (!fs.existsSync(themePath)) {
      fs.writeFileSync(themePath, themeContent);
      console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ Chakra UI theme');
    }
  } catch (error) {
    console.error('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è theme:', error.message);
  }
}

function runTypeCheck() {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∏–ø—ñ–≤...');
    execSync('npm run type-check', { stdio: 'inherit' });
    console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!');
  } catch (error) {
    console.log('‚ö†Ô∏è  –ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–æ–º–∏–ª–∫–∏ —Ç–∏–ø—ñ–≤ - –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ä—É—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
  }
}

function main() {
  console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
  const packageJson = checkPackageJson();
  if (!packageJson) {
    return;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
  const installSuccess = installDependencies();
  if (!installSuccess) {
    console.log('‚ùå –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è');
    return;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
  updateTsConfig();
  createChakraTheme();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:');
  console.log('‚úÖ Storybook –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  console.log('‚úÖ Chakra UI –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  console.log('‚úÖ TypeScript —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');

  console.log('\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: node fix-motion-errors.js');
  console.log('2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run type-check');
  console.log('3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ Chakra UI');

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∏–ø—ñ–≤
  runTypeCheck();
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  missingDependencies,
  devDependencies,
  installDependencies,
  updateTsConfig,
  createChakraTheme,
};
