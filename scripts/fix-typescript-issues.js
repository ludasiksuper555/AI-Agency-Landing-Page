#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö TypeScript –æ—à–∏–±–æ–∫
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Framer Motion –æ—à–∏–±–æ–∫
function fixFramerMotionIssues(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ motion –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å className
  const motionClassNameRegex = /(motion\.[a-zA-Z]+)([\s\S]*?)(className="[^"]*")/g;
  if (motionClassNameRegex.test(content)) {
    content = content.replace(motionClassNameRegex, (match, motionComponent, props, className) => {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º className –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–ø—Å–æ–≤
      const cleanProps = props.replace(/className="[^"]*"\s*/g, '');
      return `${motionComponent}\n          ${className}${cleanProps}`;
    });
    modified = true;
  }

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function fixUnusedVariables(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ _ –∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
  const unusedParamRegex = /\(([^)]*?)\)\s*=>\s*{/g;
  content = content.replace(unusedParamRegex, (match, params) => {
    if (params.includes('node') && !params.includes('_node')) {
      const newParams = params.replace(/\bnode\b/g, '_node');
      modified = true;
      return `(${newParams}) => {`;
    }
    return match;
  });

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  const unusedImports = ['AnimatePresence', 'ThemeContextType', 'router'];

  unusedImports.forEach(importName => {
    const importRegex = new RegExp(`import\s*{[^}]*\b${importName}\b[^}]*}`, 'g');
    if (importRegex.test(content)) {
      content = content.replace(importRegex, match => {
        const cleanedImport = match.replace(new RegExp(`\s*,?\s*\b${importName}\b\s*,?`, 'g'), '');
        if (cleanedImport.includes('{}')) {
          return ''; // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç
        }
        modified = true;
        return cleanedImport;
      });
    }
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤
function fixMissingTypes(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  const implicitAnyRegex = /\(([^)]*?)\)\s*=>/g;
  content = content.replace(implicitAnyRegex, (match, params) => {
    if (params.includes('call') && !params.includes(': any')) {
      const newParams = params.replace(/\bcall\b/g, 'call: any');
      modified = true;
      return `(${newParams}) =>`;
    }
    return match;
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function fixFile(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }

  try {
    fixFramerMotionIssues(filePath);
    fixUnusedVariables(filePath);
    fixMissingTypes(filePath);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'components/ClerkProvider.tsx',
  'components/Contact.tsx',
  'components/ContactForm.tsx',
  'components/ContentfulRenderer.tsx',
  'components/ExportOpportunitiesMap.tsx',
  'components/FAQ.tsx',
  'components/Features.tsx',
  'components/Footer.tsx',
  'components/Header.tsx',
  'components/Header.test.tsx',
  'components/Hero.tsx',
  'lib/documentation/autoDocGenerator.ts',
];

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫...');

filesToFix.forEach(file => {
  const fullPath = path.join(__dirname, '..', file);
  fixFile(fullPath);
});

// –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
const specificFixes = {
  'pages/api/recommendations/approve.ts': [
    {
      search: 'declare global {\n  const recommendations: UnknownRecord[];\n}',
      replace: 'declare global {\n  var recommendations: UnknownRecord[];\n}',
    },
  ],
  'pages/api/recommendations/[id].ts': [
    {
      search: 'declare global {\n  const recommendations: UnknownRecord[];\n}',
      replace: 'declare global {\n  var recommendations: UnknownRecord[];\n}',
    },
  ],
  'pages/api/recommendations/list.ts': [
    {
      search: 'declare global {\n  const recommendations: UnknownRecord[];\n}',
      replace: 'declare global {\n  var recommendations: UnknownRecord[];\n}',
    },
  ],
};

console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å:');
console.log('npm run type-check');
console.log('npm run lint:fix');
