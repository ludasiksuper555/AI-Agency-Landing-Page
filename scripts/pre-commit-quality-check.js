#!/usr/bin/env node

/**
 * Pre-commit Quality Check Script
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
 */

const { execSync } = require('child_process');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

class QualityChecker {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.startTime = Date.now();
  }

  log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = `[${timestamp}]`;

    switch (type) {
      case 'success':
        console.log(chalk.green(`‚úÖ ${prefix} ${message}`));
        break;
      case 'error':
        console.log(chalk.red(`‚ùå ${prefix} ${message}`));
        this.errors.push(message);
        break;
      case 'warning':
        console.log(chalk.yellow(`‚ö†Ô∏è  ${prefix} ${message}`));
        this.warnings.push(message);
        break;
      case 'info':
      default:
        console.log(chalk.blue(`‚ÑπÔ∏è  ${prefix} ${message}`));
        break;
    }
  }

  async runCommand(command, description, options = {}) {
    const { allowFailure = false, timeout = 30000 } = options;

    try {
      this.log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${description}`);
      const result = execSync(command, {
        encoding: 'utf8',
        timeout,
        stdio: 'pipe',
      });

      this.log(`${description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 'success');
      return { success: true, output: result };
    } catch (error) {
      const message = `${description} - –æ—à–∏–±–∫–∞: ${error.message}`;

      if (allowFailure) {
        this.log(message, 'warning');
        return { success: false, output: error.stdout || error.message };
      } else {
        this.log(message, 'error');
        return { success: false, output: error.stdout || error.message };
      }
    }
  }

  async checkTypeScript() {
    return await this.runCommand('npx tsc --noEmit --skipLibCheck', 'TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤');
  }

  async checkESLint() {
    return await this.runCommand(
      'npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0',
      'ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞',
      { allowFailure: true }
    );
  }

  async checkPrettier() {
    return await this.runCommand('npx prettier --check .', 'Prettier –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
      allowFailure: true,
    });
  }

  async runTests() {
    return await this.runCommand('npm run test:ci', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤', { timeout: 60000 });
  }

  async checkSecurity() {
    return await this.runCommand(
      'npm audit --audit-level=moderate',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
      { allowFailure: true }
    );
  }

  async checkPackageJson() {
    try {
      const packagePath = path.join(process.cwd(), 'package.json');
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = ['name', 'version', 'description', 'scripts'];
      const missingFields = requiredFields.filter(field => !packageJson[field]);

      if (missingFields.length > 0) {
        this.log(`package.json: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`, 'warning');
      } else {
        this.log('package.json - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'success');
      }

      return { success: true };
    } catch (error) {
      this.log(`package.json - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`, 'error');
      return { success: false };
    }
  }

  async checkGitStatus() {
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' });
      const stagedFiles = status
        .split('\n')
        .filter(line => line.startsWith('M ') || line.startsWith('A '));

      if (stagedFiles.length === 0) {
        this.log('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞', 'warning');
        return { success: false };
      }

      this.log(`–ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É: ${stagedFiles.length} —Ñ–∞–π–ª–æ–≤`, 'success');
      return { success: true };
    } catch (error) {
      this.log(`Git —Å—Ç–∞—Ç—É—Å - –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      return { success: false };
    }
  }

  generateReport() {
    const duration = ((Date.now() - this.startTime) / 1000).toFixed(2);

    console.log('\n' + '='.repeat(60));
    console.log(chalk.bold.blue('üìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ö–ê–ß–ï–°–¢–í–ê'));
    console.log('='.repeat(60));

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.errors.length}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.warnings.length}`);

    if (this.errors.length > 0) {
      console.log('\n' + chalk.red.bold('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:'));
      this.errors.forEach((error, index) => {
        console.log(chalk.red(`${index + 1}. ${error}`));
      });
    }

    if (this.warnings.length > 0) {
      console.log('\n' + chalk.yellow.bold('‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:'));
      this.warnings.forEach((warning, index) => {
        console.log(chalk.yellow(`${index + 1}. ${warning}`));
      });
    }

    const success = this.errors.length === 0;

    if (success) {
      console.log('\n' + chalk.green.bold('‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!'));
      console.log(chalk.green('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É –∏ –¥–µ–ø–ª–æ—é'));
    } else {
      console.log('\n' + chalk.red.bold('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò'));
      console.log(chalk.red('üõ†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º'));
    }

    console.log('='.repeat(60) + '\n');

    return success;
  }

  async run() {
    console.log(chalk.bold.blue('üîç –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê\n'));

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫
    const checks = [
      () => this.checkGitStatus(),
      () => this.checkPackageJson(),
      () => this.checkTypeScript(),
      () => this.checkESLint(),
      () => this.checkPrettier(),
      () => this.runTests(),
      () => this.checkSecurity(),
    ];

    for (const check of checks) {
      await check();
    }

    const success = this.generateReport();
    process.exit(success ? 0 : 1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const checker = new QualityChecker();
  checker.run().catch(error => {
    console.error(chalk.red('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error);
    process.exit(1);
  });
}

module.exports = QualityChecker;
